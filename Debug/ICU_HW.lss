
ICU_HW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000247a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000247a  0000250e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800074  00800074  00002522  2**0
                  ALLOC
  3 .stab         00002634  00000000  00000000  00002524  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012a1  00000000  00000000  00004b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005df9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005f39  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000060a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007cf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008bdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000998c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009d79  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a547  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 4e 0a 	jmp	0x149c	; 0x149c <__vector_1>
       8:	0c 94 81 0a 	jmp	0x1502	; 0x1502 <__vector_2>
       c:	0c 94 b4 0a 	jmp	0x1568	; 0x1568 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 b0 07 	jmp	0xf60	; 0xf60 <__vector_10>
      2c:	0c 94 7d 07 	jmp	0xefa	; 0xefa <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e7       	ldi	r30, 0x7A	; 122
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 38       	cpi	r26, 0x8B	; 139
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <main>
      8a:	0c 94 3b 12 	jmp	0x2476	; 0x2476 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 04 12 	jmp	0x2408	; 0x2408 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e6       	ldi	r26, 0x6C	; 108
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 20 12 	jmp	0x2440	; 0x2440 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 10 12 	jmp	0x2420	; 0x2420 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2c 12 	jmp	0x2458	; 0x2458 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 10 12 	jmp	0x2420	; 0x2420 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2c 12 	jmp	0x2458	; 0x2458 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 04 12 	jmp	0x2408	; 0x2408 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e6       	ldi	r24, 0x6C	; 108
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 20 12 	jmp	0x2440	; 0x2440 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 10 12 	jmp	0x2420	; 0x2420 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 2c 12 	jmp	0x2458	; 0x2458 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 10 12 	jmp	0x2420	; 0x2420 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 2c 12 	jmp	0x2458	; 0x2458 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 10 12 	jmp	0x2420	; 0x2420 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 2c 12 	jmp	0x2458	; 0x2458 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 14 12 	jmp	0x2428	; 0x2428 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 30 12 	jmp	0x2460	; 0x2460 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TIMER0_voidInt>:
static void (*TIMER0_pvCompMatchCallBackFunc)(void)=NULL;

static void (*ICU_pvCallBackFunc)(void)=NULL;

void TIMER0_voidInt(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0,TCCR0_WGM00);
     b4e:	a3 e5       	ldi	r26, 0x53	; 83
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e3 e5       	ldi	r30, 0x53	; 83
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
     b5c:	a3 e5       	ldi	r26, 0x53	; 83
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e3 e5       	ldi	r30, 0x53	; 83
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	88 60       	ori	r24, 0x08	; 8
     b68:	8c 93       	st	X, r24

	OCR0=TIMER0_u8COMP_MATCH_VAL;
     b6a:	ec e5       	ldi	r30, 0x5C	; 92
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 e4       	ldi	r24, 0x40	; 64
     b70:	80 83       	st	Z, r24

	TCCR0 &=TIMER0_PRESCALER_MASK;
     b72:	a3 e5       	ldi	r26, 0x53	; 83
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	e3 e5       	ldi	r30, 0x53	; 83
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	88 7f       	andi	r24, 0xF8	; 248
     b7e:	8c 93       	st	X, r24
	TCCR0 |=TIMER0_u8PRESCALER;
     b80:	a3 e5       	ldi	r26, 0x53	; 83
     b82:	b0 e0       	ldi	r27, 0x00	; 0
     b84:	e3 e5       	ldi	r30, 0x53	; 83
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	80 81       	ld	r24, Z
     b8a:	82 60       	ori	r24, 0x02	; 2
     b8c:	8c 93       	st	X, r24

	SET_BIT(TCCR0,TCCR0_COM01);
     b8e:	a3 e5       	ldi	r26, 0x53	; 83
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	e3 e5       	ldi	r30, 0x53	; 83
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	80 62       	ori	r24, 0x20	; 32
     b9a:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_COM00);
     b9c:	a3 e5       	ldi	r26, 0x53	; 83
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	e3 e5       	ldi	r30, 0x53	; 83
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	8f 7e       	andi	r24, 0xEF	; 239
     ba8:	8c 93       	st	X, r24

}
     baa:	cf 91       	pop	r28
     bac:	df 91       	pop	r29
     bae:	08 95       	ret

00000bb0 <TIMER0_u8OverflowSetCallBack>:

u8 TIMER0_u8OverflowSetCallBack(void (*Copy_pvCallBackFunc)(void))
{
     bb0:	df 93       	push	r29
     bb2:	cf 93       	push	r28
     bb4:	00 d0       	rcall	.+0      	; 0xbb6 <TIMER0_u8OverflowSetCallBack+0x6>
     bb6:	0f 92       	push	r0
     bb8:	cd b7       	in	r28, 0x3d	; 61
     bba:	de b7       	in	r29, 0x3e	; 62
     bbc:	9b 83       	std	Y+3, r25	; 0x03
     bbe:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     bc0:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pvCallBackFunc != NULL)
     bc2:	8a 81       	ldd	r24, Y+2	; 0x02
     bc4:	9b 81       	ldd	r25, Y+3	; 0x03
     bc6:	00 97       	sbiw	r24, 0x00	; 0
     bc8:	39 f0       	breq	.+14     	; 0xbd8 <TIMER0_u8OverflowSetCallBack+0x28>
	{
		TIMER0_pvOverflowCallBackFunc=Copy_pvCallBackFunc;
     bca:	8a 81       	ldd	r24, Y+2	; 0x02
     bcc:	9b 81       	ldd	r25, Y+3	; 0x03
     bce:	90 93 75 00 	sts	0x0075, r25
     bd2:	80 93 74 00 	sts	0x0074, r24
     bd6:	02 c0       	rjmp	.+4      	; 0xbdc <TIMER0_u8OverflowSetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState=NULL_POINTER;
     bd8:	82 e0       	ldi	r24, 0x02	; 2
     bda:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
}
     bde:	0f 90       	pop	r0
     be0:	0f 90       	pop	r0
     be2:	0f 90       	pop	r0
     be4:	cf 91       	pop	r28
     be6:	df 91       	pop	r29
     be8:	08 95       	ret

00000bea <TIMER0_u8CompMatchSetCallBack>:

u8 TIMER0_u8CompMatchSetCallBack(void (*Copy_pvCallBackFunc)(void))
{
     bea:	df 93       	push	r29
     bec:	cf 93       	push	r28
     bee:	00 d0       	rcall	.+0      	; 0xbf0 <TIMER0_u8CompMatchSetCallBack+0x6>
     bf0:	0f 92       	push	r0
     bf2:	cd b7       	in	r28, 0x3d	; 61
     bf4:	de b7       	in	r29, 0x3e	; 62
     bf6:	9b 83       	std	Y+3, r25	; 0x03
     bf8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     bfa:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pvCallBackFunc != NULL)
     bfc:	8a 81       	ldd	r24, Y+2	; 0x02
     bfe:	9b 81       	ldd	r25, Y+3	; 0x03
     c00:	00 97       	sbiw	r24, 0x00	; 0
     c02:	39 f0       	breq	.+14     	; 0xc12 <TIMER0_u8CompMatchSetCallBack+0x28>
	{
		TIMER0_pvCompMatchCallBackFunc=Copy_pvCallBackFunc;
     c04:	8a 81       	ldd	r24, Y+2	; 0x02
     c06:	9b 81       	ldd	r25, Y+3	; 0x03
     c08:	90 93 77 00 	sts	0x0077, r25
     c0c:	80 93 76 00 	sts	0x0076, r24
     c10:	02 c0       	rjmp	.+4      	; 0xc16 <TIMER0_u8CompMatchSetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState=NULL_POINTER;
     c12:	82 e0       	ldi	r24, 0x02	; 2
     c14:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
     c16:	89 81       	ldd	r24, Y+1	; 0x01
}
     c18:	0f 90       	pop	r0
     c1a:	0f 90       	pop	r0
     c1c:	0f 90       	pop	r0
     c1e:	cf 91       	pop	r28
     c20:	df 91       	pop	r29
     c22:	08 95       	ret

00000c24 <TIMER0_voidSetPreload>:
void TIMER0_voidSetPreload(u8 Copy_u8Preload)
{
     c24:	df 93       	push	r29
     c26:	cf 93       	push	r28
     c28:	0f 92       	push	r0
     c2a:	cd b7       	in	r28, 0x3d	; 61
     c2c:	de b7       	in	r29, 0x3e	; 62
     c2e:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Preload;
     c30:	e2 e5       	ldi	r30, 0x52	; 82
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	89 81       	ldd	r24, Y+1	; 0x01
     c36:	80 83       	st	Z, r24
}
     c38:	0f 90       	pop	r0
     c3a:	cf 91       	pop	r28
     c3c:	df 91       	pop	r29
     c3e:	08 95       	ret

00000c40 <TIMER1_voidInt>:
void TIMER1_voidInt(void)
{
     c40:	df 93       	push	r29
     c42:	cf 93       	push	r28
     c44:	cd b7       	in	r28, 0x3d	; 61
     c46:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1A,TCCR1A_WGM10);
     c48:	af e4       	ldi	r26, 0x4F	; 79
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	ef e4       	ldi	r30, 0x4F	; 79
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	8e 7f       	andi	r24, 0xFE	; 254
     c54:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCR1A_WGM11);
     c56:	af e4       	ldi	r26, 0x4F	; 79
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	ef e4       	ldi	r30, 0x4F	; 79
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	8d 7f       	andi	r24, 0xFD	; 253
     c62:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_WGM12);
     c64:	ae e4       	ldi	r26, 0x4E	; 78
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	ee e4       	ldi	r30, 0x4E	; 78
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	87 7f       	andi	r24, 0xF7	; 247
     c70:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_WGM13);
     c72:	ae e4       	ldi	r26, 0x4E	; 78
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	ee e4       	ldi	r30, 0x4E	; 78
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	8f 7e       	andi	r24, 0xEF	; 239
     c7e:	8c 93       	st	X, r24

	CLR_BIT(TCCR1B,TCCR1B_CS10);
     c80:	ae e4       	ldi	r26, 0x4E	; 78
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	ee e4       	ldi	r30, 0x4E	; 78
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 81       	ld	r24, Z
     c8a:	8e 7f       	andi	r24, 0xFE	; 254
     c8c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_CS11);
     c8e:	ae e4       	ldi	r26, 0x4E	; 78
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	ee e4       	ldi	r30, 0x4E	; 78
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	82 60       	ori	r24, 0x02	; 2
     c9a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS12);
     c9c:	ae e4       	ldi	r26, 0x4E	; 78
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	ee e4       	ldi	r30, 0x4E	; 78
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	8b 7f       	andi	r24, 0xFB	; 251
     ca8:	8c 93       	st	X, r24
}
     caa:	cf 91       	pop	r28
     cac:	df 91       	pop	r29
     cae:	08 95       	ret

00000cb0 <TIMER1_voidSetChannelACompValue>:
void TIMER1_voidSetChannelACompValue(u16 Copy_u16Value)
{
     cb0:	df 93       	push	r29
     cb2:	cf 93       	push	r28
     cb4:	00 d0       	rcall	.+0      	; 0xcb6 <TIMER1_voidSetChannelACompValue+0x6>
     cb6:	cd b7       	in	r28, 0x3d	; 61
     cb8:	de b7       	in	r29, 0x3e	; 62
     cba:	9a 83       	std	Y+2, r25	; 0x02
     cbc:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=Copy_u16Value;
     cbe:	ea e4       	ldi	r30, 0x4A	; 74
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
     cc4:	9a 81       	ldd	r25, Y+2	; 0x02
     cc6:	91 83       	std	Z+1, r25	; 0x01
     cc8:	80 83       	st	Z, r24
}
     cca:	0f 90       	pop	r0
     ccc:	0f 90       	pop	r0
     cce:	cf 91       	pop	r28
     cd0:	df 91       	pop	r29
     cd2:	08 95       	ret

00000cd4 <TIMER1_voidSetPreloadValue>:
void TIMER1_voidSetPreloadValue(u16 Copy_u16Value)
{
     cd4:	df 93       	push	r29
     cd6:	cf 93       	push	r28
     cd8:	00 d0       	rcall	.+0      	; 0xcda <TIMER1_voidSetPreloadValue+0x6>
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	9a 83       	std	Y+2, r25	; 0x02
     ce0:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=Copy_u16Value;
     ce2:	ec e4       	ldi	r30, 0x4C	; 76
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	89 81       	ldd	r24, Y+1	; 0x01
     ce8:	9a 81       	ldd	r25, Y+2	; 0x02
     cea:	91 83       	std	Z+1, r25	; 0x01
     cec:	80 83       	st	Z, r24
}
     cee:	0f 90       	pop	r0
     cf0:	0f 90       	pop	r0
     cf2:	cf 91       	pop	r28
     cf4:	df 91       	pop	r29
     cf6:	08 95       	ret

00000cf8 <TIMER1_Readu16TimerValue>:
u16 TIMER1_Readu16TimerValue(void)
{
     cf8:	df 93       	push	r29
     cfa:	cf 93       	push	r28
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
     d00:	ec e4       	ldi	r30, 0x4C	; 76
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	91 81       	ldd	r25, Z+1	; 0x01
}
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	08 95       	ret

00000d0e <ICU_voidInit>:
void ICU_voidInit(void)
{
     d0e:	df 93       	push	r29
     d10:	cf 93       	push	r28
     d12:	cd b7       	in	r28, 0x3d	; 61
     d14:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1A,TCCR1A_WGM10);
     d16:	af e4       	ldi	r26, 0x4F	; 79
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	ef e4       	ldi	r30, 0x4F	; 79
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	8e 7f       	andi	r24, 0xFE	; 254
     d22:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCR1A_WGM11);
     d24:	af e4       	ldi	r26, 0x4F	; 79
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	ef e4       	ldi	r30, 0x4F	; 79
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	8d 7f       	andi	r24, 0xFD	; 253
     d30:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_WGM12);
     d32:	ae e4       	ldi	r26, 0x4E	; 78
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	ee e4       	ldi	r30, 0x4E	; 78
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	87 7f       	andi	r24, 0xF7	; 247
     d3e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_WGM13);
     d40:	ae e4       	ldi	r26, 0x4E	; 78
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	ee e4       	ldi	r30, 0x4E	; 78
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	8f 7e       	andi	r24, 0xEF	; 239
     d4c:	8c 93       	st	X, r24

	CLR_BIT(TCCR1B,TCCR1B_CS10);
     d4e:	ae e4       	ldi	r26, 0x4E	; 78
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	ee e4       	ldi	r30, 0x4E	; 78
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	8e 7f       	andi	r24, 0xFE	; 254
     d5a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_CS11);
     d5c:	ae e4       	ldi	r26, 0x4E	; 78
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	ee e4       	ldi	r30, 0x4E	; 78
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	82 60       	ori	r24, 0x02	; 2
     d68:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS12);
     d6a:	ae e4       	ldi	r26, 0x4E	; 78
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	ee e4       	ldi	r30, 0x4E	; 78
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	8b 7f       	andi	r24, 0xFB	; 251
     d76:	8c 93       	st	X, r24

	SET_BIT(TCCR1B,TCCR1B_ICES1);
     d78:	ae e4       	ldi	r26, 0x4E	; 78
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	ee e4       	ldi	r30, 0x4E	; 78
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	80 64       	ori	r24, 0x40	; 64
     d84:	8c 93       	st	X, r24
	TCNT1 = 0;
     d86:	ec e4       	ldi	r30, 0x4C	; 76
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	11 82       	std	Z+1, r1	; 0x01
     d8c:	10 82       	st	Z, r1
	ICR1 = 0;
     d8e:	e6 e4       	ldi	r30, 0x46	; 70
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	11 82       	std	Z+1, r1	; 0x01
     d94:	10 82       	st	Z, r1

	SET_BIT(TIMSK,TIMSK_TICIE1);
     d96:	a9 e5       	ldi	r26, 0x59	; 89
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	e9 e5       	ldi	r30, 0x59	; 89
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	80 62       	ori	r24, 0x20	; 32
     da2:	8c 93       	st	X, r24

}
     da4:	cf 91       	pop	r28
     da6:	df 91       	pop	r29
     da8:	08 95       	ret

00000daa <ICU_u8SetCallBack>:
u8 ICU_u8SetCallBack(void(*Copy_pvCallBackFunc)(void))
{
     daa:	df 93       	push	r29
     dac:	cf 93       	push	r28
     dae:	00 d0       	rcall	.+0      	; 0xdb0 <ICU_u8SetCallBack+0x6>
     db0:	0f 92       	push	r0
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
     db6:	9b 83       	std	Y+3, r25	; 0x03
     db8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
     dba:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pvCallBackFunc != NULL)
     dbc:	8a 81       	ldd	r24, Y+2	; 0x02
     dbe:	9b 81       	ldd	r25, Y+3	; 0x03
     dc0:	00 97       	sbiw	r24, 0x00	; 0
     dc2:	39 f0       	breq	.+14     	; 0xdd2 <ICU_u8SetCallBack+0x28>
	{
		ICU_pvCallBackFunc = Copy_pvCallBackFunc;
     dc4:	8a 81       	ldd	r24, Y+2	; 0x02
     dc6:	9b 81       	ldd	r25, Y+3	; 0x03
     dc8:	90 93 79 00 	sts	0x0079, r25
     dcc:	80 93 78 00 	sts	0x0078, r24
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <ICU_u8SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState=NULL_POINTER;
     dd2:	82 e0       	ldi	r24, 0x02	; 2
     dd4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
     dd6:	89 81       	ldd	r24, Y+1	; 0x01
}
     dd8:	0f 90       	pop	r0
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
     dde:	cf 91       	pop	r28
     de0:	df 91       	pop	r29
     de2:	08 95       	ret

00000de4 <ICU_u8SetTrigger>:
u8 ICU_u8SetTrigger(u8 Copy_u8TriggerSource)
{
     de4:	df 93       	push	r29
     de6:	cf 93       	push	r28
     de8:	00 d0       	rcall	.+0      	; 0xdea <ICU_u8SetTrigger+0x6>
     dea:	00 d0       	rcall	.+0      	; 0xdec <ICU_u8SetTrigger+0x8>
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
     df0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     df2:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8TriggerSource)
     df4:	8a 81       	ldd	r24, Y+2	; 0x02
     df6:	28 2f       	mov	r18, r24
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	3c 83       	std	Y+4, r19	; 0x04
     dfc:	2b 83       	std	Y+3, r18	; 0x03
     dfe:	8b 81       	ldd	r24, Y+3	; 0x03
     e00:	9c 81       	ldd	r25, Y+4	; 0x04
     e02:	00 97       	sbiw	r24, 0x00	; 0
     e04:	31 f0       	breq	.+12     	; 0xe12 <ICU_u8SetTrigger+0x2e>
     e06:	2b 81       	ldd	r18, Y+3	; 0x03
     e08:	3c 81       	ldd	r19, Y+4	; 0x04
     e0a:	21 30       	cpi	r18, 0x01	; 1
     e0c:	31 05       	cpc	r19, r1
     e0e:	49 f0       	breq	.+18     	; 0xe22 <ICU_u8SetTrigger+0x3e>
     e10:	10 c0       	rjmp	.+32     	; 0xe32 <ICU_u8SetTrigger+0x4e>
	{

	case FALLING_EDGE : CLR_BIT(TCCR1B,TCCR1B_ICES1); break;
     e12:	ae e4       	ldi	r26, 0x4E	; 78
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	ee e4       	ldi	r30, 0x4E	; 78
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	8f 7b       	andi	r24, 0xBF	; 191
     e1e:	8c 93       	st	X, r24
     e20:	0a c0       	rjmp	.+20     	; 0xe36 <ICU_u8SetTrigger+0x52>
	case RISING_EDGE  : SET_BIT(TCCR1B,TCCR1B_ICES1); break;
     e22:	ae e4       	ldi	r26, 0x4E	; 78
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	ee e4       	ldi	r30, 0x4E	; 78
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	80 64       	ori	r24, 0x40	; 64
     e2e:	8c 93       	st	X, r24
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <ICU_u8SetTrigger+0x52>
	default : Local_u8ErrorState = NOK; break;
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
     e36:	89 81       	ldd	r24, Y+1	; 0x01
}
     e38:	0f 90       	pop	r0
     e3a:	0f 90       	pop	r0
     e3c:	0f 90       	pop	r0
     e3e:	0f 90       	pop	r0
     e40:	cf 91       	pop	r28
     e42:	df 91       	pop	r29
     e44:	08 95       	ret

00000e46 <ICU_u16ReadInputCapture>:
u16 ICU_u16ReadInputCapture(void)
{
     e46:	df 93       	push	r29
     e48:	cf 93       	push	r28
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
     e4e:	e6 e4       	ldi	r30, 0x46	; 70
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	91 81       	ldd	r25, Z+1	; 0x01
}
     e56:	cf 91       	pop	r28
     e58:	df 91       	pop	r29
     e5a:	08 95       	ret

00000e5c <ICU_voidInterruptDisable>:
void ICU_voidInterruptDisable(void)
{
     e5c:	df 93       	push	r29
     e5e:	cf 93       	push	r28
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TICIE1);
     e64:	a9 e5       	ldi	r26, 0x59	; 89
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e9 e5       	ldi	r30, 0x59	; 89
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	8f 7d       	andi	r24, 0xDF	; 223
     e70:	8c 93       	st	X, r24
}
     e72:	cf 91       	pop	r28
     e74:	df 91       	pop	r29
     e76:	08 95       	ret

00000e78 <WDT_voidEnable>:

void WDT_voidEnable(void)
{
     e78:	df 93       	push	r29
     e7a:	cf 93       	push	r28
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDTCR,WDTCR_WDE);
     e80:	a1 e4       	ldi	r26, 0x41	; 65
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	e1 e4       	ldi	r30, 0x41	; 65
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	88 60       	ori	r24, 0x08	; 8
     e8c:	8c 93       	st	X, r24
}
     e8e:	cf 91       	pop	r28
     e90:	df 91       	pop	r29
     e92:	08 95       	ret

00000e94 <WDT_voidDisable>:

void WDT_voidDisable(void)
{
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	cd b7       	in	r28, 0x3d	; 61
     e9a:	de b7       	in	r29, 0x3e	; 62
	WDTCR |= WDT_MASK_DISABLE;
     e9c:	a1 e4       	ldi	r26, 0x41	; 65
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e1 e4       	ldi	r30, 0x41	; 65
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	88 61       	ori	r24, 0x18	; 24
     ea8:	8c 93       	st	X, r24
	WDTCR = 0;
     eaa:	e1 e4       	ldi	r30, 0x41	; 65
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	10 82       	st	Z, r1
}
     eb0:	cf 91       	pop	r28
     eb2:	df 91       	pop	r29
     eb4:	08 95       	ret

00000eb6 <WDT_u8Sleep>:

u8 WDT_u8Sleep(u8 Copy_u8SleepTime)
{
     eb6:	df 93       	push	r29
     eb8:	cf 93       	push	r28
     eba:	00 d0       	rcall	.+0      	; 0xebc <WDT_u8Sleep+0x6>
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
     ec0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     ec2:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8SleepTime<8)
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	88 30       	cpi	r24, 0x08	; 8
     ec8:	80 f4       	brcc	.+32     	; 0xeea <WDT_u8Sleep+0x34>
	{
		WDTCR &=WDT_PRESCALER_MASK;
     eca:	a1 e4       	ldi	r26, 0x41	; 65
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	e1 e4       	ldi	r30, 0x41	; 65
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	88 7f       	andi	r24, 0xF8	; 248
     ed6:	8c 93       	st	X, r24
		WDTCR |= Copy_u8SleepTime ;
     ed8:	a1 e4       	ldi	r26, 0x41	; 65
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e1 e4       	ldi	r30, 0x41	; 65
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	90 81       	ld	r25, Z
     ee2:	8a 81       	ldd	r24, Y+2	; 0x02
     ee4:	89 2b       	or	r24, r25
     ee6:	8c 93       	st	X, r24
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <WDT_u8Sleep+0x38>
	}
	else
	{
		Local_u8ErrorState=NOK;
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
     eee:	89 81       	ldd	r24, Y+1	; 0x01
}
     ef0:	0f 90       	pop	r0
     ef2:	0f 90       	pop	r0
     ef4:	cf 91       	pop	r28
     ef6:	df 91       	pop	r29
     ef8:	08 95       	ret

00000efa <__vector_11>:


void __vector_11 (void)  __attribute__((signal));
void __vector_11 (void)
{
     efa:	1f 92       	push	r1
     efc:	0f 92       	push	r0
     efe:	0f b6       	in	r0, 0x3f	; 63
     f00:	0f 92       	push	r0
     f02:	11 24       	eor	r1, r1
     f04:	2f 93       	push	r18
     f06:	3f 93       	push	r19
     f08:	4f 93       	push	r20
     f0a:	5f 93       	push	r21
     f0c:	6f 93       	push	r22
     f0e:	7f 93       	push	r23
     f10:	8f 93       	push	r24
     f12:	9f 93       	push	r25
     f14:	af 93       	push	r26
     f16:	bf 93       	push	r27
     f18:	ef 93       	push	r30
     f1a:	ff 93       	push	r31
     f1c:	df 93       	push	r29
     f1e:	cf 93       	push	r28
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62

	if (TIMER0_pvOverflowCallBackFunc !=NULL)
     f24:	80 91 74 00 	lds	r24, 0x0074
     f28:	90 91 75 00 	lds	r25, 0x0075
     f2c:	00 97       	sbiw	r24, 0x00	; 0
     f2e:	29 f0       	breq	.+10     	; 0xf3a <__vector_11+0x40>
	{
		TIMER0_pvOverflowCallBackFunc();
     f30:	e0 91 74 00 	lds	r30, 0x0074
     f34:	f0 91 75 00 	lds	r31, 0x0075
     f38:	09 95       	icall
	}
	else
	{

	}
}
     f3a:	cf 91       	pop	r28
     f3c:	df 91       	pop	r29
     f3e:	ff 91       	pop	r31
     f40:	ef 91       	pop	r30
     f42:	bf 91       	pop	r27
     f44:	af 91       	pop	r26
     f46:	9f 91       	pop	r25
     f48:	8f 91       	pop	r24
     f4a:	7f 91       	pop	r23
     f4c:	6f 91       	pop	r22
     f4e:	5f 91       	pop	r21
     f50:	4f 91       	pop	r20
     f52:	3f 91       	pop	r19
     f54:	2f 91       	pop	r18
     f56:	0f 90       	pop	r0
     f58:	0f be       	out	0x3f, r0	; 63
     f5a:	0f 90       	pop	r0
     f5c:	1f 90       	pop	r1
     f5e:	18 95       	reti

00000f60 <__vector_10>:
void __vector_10 (void)  __attribute__((signal));
void __vector_10 (void)
{
     f60:	1f 92       	push	r1
     f62:	0f 92       	push	r0
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	0f 92       	push	r0
     f68:	11 24       	eor	r1, r1
     f6a:	2f 93       	push	r18
     f6c:	3f 93       	push	r19
     f6e:	4f 93       	push	r20
     f70:	5f 93       	push	r21
     f72:	6f 93       	push	r22
     f74:	7f 93       	push	r23
     f76:	8f 93       	push	r24
     f78:	9f 93       	push	r25
     f7a:	af 93       	push	r26
     f7c:	bf 93       	push	r27
     f7e:	ef 93       	push	r30
     f80:	ff 93       	push	r31
     f82:	df 93       	push	r29
     f84:	cf 93       	push	r28
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62

	if (TIMER0_pvCompMatchCallBackFunc != NULL)
     f8a:	80 91 76 00 	lds	r24, 0x0076
     f8e:	90 91 77 00 	lds	r25, 0x0077
     f92:	00 97       	sbiw	r24, 0x00	; 0
     f94:	29 f0       	breq	.+10     	; 0xfa0 <__vector_10+0x40>
	{
		TIMER0_pvCompMatchCallBackFunc();
     f96:	e0 91 76 00 	lds	r30, 0x0076
     f9a:	f0 91 77 00 	lds	r31, 0x0077
     f9e:	09 95       	icall
	}
	else
	{

	}
}
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	ff 91       	pop	r31
     fa6:	ef 91       	pop	r30
     fa8:	bf 91       	pop	r27
     faa:	af 91       	pop	r26
     fac:	9f 91       	pop	r25
     fae:	8f 91       	pop	r24
     fb0:	7f 91       	pop	r23
     fb2:	6f 91       	pop	r22
     fb4:	5f 91       	pop	r21
     fb6:	4f 91       	pop	r20
     fb8:	3f 91       	pop	r19
     fba:	2f 91       	pop	r18
     fbc:	0f 90       	pop	r0
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	0f 90       	pop	r0
     fc2:	1f 90       	pop	r1
     fc4:	18 95       	reti

00000fc6 <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
     fc6:	1f 92       	push	r1
     fc8:	0f 92       	push	r0
     fca:	0f b6       	in	r0, 0x3f	; 63
     fcc:	0f 92       	push	r0
     fce:	11 24       	eor	r1, r1
     fd0:	2f 93       	push	r18
     fd2:	3f 93       	push	r19
     fd4:	4f 93       	push	r20
     fd6:	5f 93       	push	r21
     fd8:	6f 93       	push	r22
     fda:	7f 93       	push	r23
     fdc:	8f 93       	push	r24
     fde:	9f 93       	push	r25
     fe0:	af 93       	push	r26
     fe2:	bf 93       	push	r27
     fe4:	ef 93       	push	r30
     fe6:	ff 93       	push	r31
     fe8:	df 93       	push	r29
     fea:	cf 93       	push	r28
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
	if (ICU_pvCallBackFunc != NULL)
     ff0:	80 91 78 00 	lds	r24, 0x0078
     ff4:	90 91 79 00 	lds	r25, 0x0079
     ff8:	00 97       	sbiw	r24, 0x00	; 0
     ffa:	29 f0       	breq	.+10     	; 0x1006 <__vector_6+0x40>
	{
		ICU_pvCallBackFunc();
     ffc:	e0 91 78 00 	lds	r30, 0x0078
    1000:	f0 91 79 00 	lds	r31, 0x0079
    1004:	09 95       	icall
	}
	else
	{

	}
}
    1006:	cf 91       	pop	r28
    1008:	df 91       	pop	r29
    100a:	ff 91       	pop	r31
    100c:	ef 91       	pop	r30
    100e:	bf 91       	pop	r27
    1010:	af 91       	pop	r26
    1012:	9f 91       	pop	r25
    1014:	8f 91       	pop	r24
    1016:	7f 91       	pop	r23
    1018:	6f 91       	pop	r22
    101a:	5f 91       	pop	r21
    101c:	4f 91       	pop	r20
    101e:	3f 91       	pop	r19
    1020:	2f 91       	pop	r18
    1022:	0f 90       	pop	r0
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	0f 90       	pop	r0
    1028:	1f 90       	pop	r1
    102a:	18 95       	reti

0000102c <PORT_voidInit>:
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInit(void)
{
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
	DDRA= PORTA_DIR;
    1034:	ea e3       	ldi	r30, 0x3A	; 58
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	8f ef       	ldi	r24, 0xFF	; 255
    103a:	80 83       	st	Z, r24
	DDRB= PORTB_DIR;
    103c:	e7 e3       	ldi	r30, 0x37	; 55
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	88 ee       	ldi	r24, 0xE8	; 232
    1042:	80 83       	st	Z, r24
	DDRC= PORTC_DIR;
    1044:	e4 e3       	ldi	r30, 0x34	; 52
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	10 82       	st	Z, r1
	DDRD= PORTD_DIR;
    104a:	e1 e3       	ldi	r30, 0x31	; 49
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	10 82       	st	Z, r1
	
	PORTA=PORTA_INITIAL_VALUE;
    1050:	eb e3       	ldi	r30, 0x3B	; 59
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	10 82       	st	Z, r1
	PORTB=PORTB_INITIAL_VALUE;
    1056:	e8 e3       	ldi	r30, 0x38	; 56
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	10 82       	st	Z, r1
	PORTC=PORTC_INITIAL_VALUE;
    105c:	e5 e3       	ldi	r30, 0x35	; 53
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	10 82       	st	Z, r1
	PORTD=PORTD_INITIAL_VALUE;
    1062:	e2 e3       	ldi	r30, 0x32	; 50
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	10 82       	st	Z, r1
    1068:	cf 91       	pop	r28
    106a:	df 91       	pop	r29
    106c:	08 95       	ret

0000106e <GIE_voidEnableGlobal>:

#include"GIE_interface.h"
#include"GIE_register.h"

void GIE_voidEnableGlobal(void)
{
    106e:	df 93       	push	r29
    1070:	cf 93       	push	r28
    1072:	cd b7       	in	r28, 0x3d	; 61
    1074:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    1076:	af e5       	ldi	r26, 0x5F	; 95
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	ef e5       	ldi	r30, 0x5F	; 95
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	80 68       	ori	r24, 0x80	; 128
    1082:	8c 93       	st	X, r24
}
    1084:	cf 91       	pop	r28
    1086:	df 91       	pop	r29
    1088:	08 95       	ret

0000108a <GIE_voidDisableGlobal>:
void GIE_voidDisableGlobal(void)
{
    108a:	df 93       	push	r29
    108c:	cf 93       	push	r28
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    1092:	af e5       	ldi	r26, 0x5F	; 95
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	ef e5       	ldi	r30, 0x5F	; 95
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	8f 77       	andi	r24, 0x7F	; 127
    109e:	8c 93       	st	X, r24
}
    10a0:	cf 91       	pop	r28
    10a2:	df 91       	pop	r29
    10a4:	08 95       	ret

000010a6 <EXTI_voidINT0Init>:
#include"EXTI_register.h"

static void (*EXTI_pvINTCallBackFunc[3])(void)={NULL};

void EXTI_voidINT0Init(void)
{
    10a6:	df 93       	push	r29
    10a8:	cf 93       	push	r28
    10aa:	cd b7       	in	r28, 0x3d	; 61
    10ac:	de b7       	in	r29, 0x3e	; 62
#elif EXTI_INT0_SENSE == FALLING_EDGE
	CLR_BIT(MCUCR,MCUCR_ISC00);
	SET_BIT(MCUCR,MCUCR_ISC01);

#elif EXTI_INT0_SENSE == RISING_EDGE
	SET_BIT(MCUCR,MCUCR_ISC00);
    10ae:	a5 e5       	ldi	r26, 0x55	; 85
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e5 e5       	ldi	r30, 0x55	; 85
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	81 60       	ori	r24, 0x01	; 1
    10ba:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC01);
    10bc:	a5 e5       	ldi	r26, 0x55	; 85
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e5 e5       	ldi	r30, 0x55	; 85
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	82 60       	ori	r24, 0x02	; 2
    10c8:	8c 93       	st	X, r24

#endif


#if EXTI_INT0_INTIAL_STATE == ENABLED
	SET_BIT(GICR,GICR_INT0);
    10ca:	ab e5       	ldi	r26, 0x5B	; 91
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	eb e5       	ldi	r30, 0x5B	; 91
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	80 64       	ori	r24, 0x40	; 64
    10d6:	8c 93       	st	X, r24

#else
#error "Wrong EXTI_INT0_INTIAL_STATE configuration option"

#endif
}
    10d8:	cf 91       	pop	r28
    10da:	df 91       	pop	r29
    10dc:	08 95       	ret

000010de <EXTI_voidINT1Init>:
void EXTI_voidINT1Init(void)
{
    10de:	df 93       	push	r29
    10e0:	cf 93       	push	r28
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62
#elif EXTI_INT1_SENSE == ON_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC10);
	CLR_BIT(MCUCR,MCUCR_ISC11);

#elif EXTI_INT1_SENSE == FALLING_EDGE
	CLR_BIT(MCUCR,MCUCR_ISC10);
    10e6:	a5 e5       	ldi	r26, 0x55	; 85
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	e5 e5       	ldi	r30, 0x55	; 85
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	8b 7f       	andi	r24, 0xFB	; 251
    10f2:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC11);
    10f4:	a5 e5       	ldi	r26, 0x55	; 85
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e5 e5       	ldi	r30, 0x55	; 85
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	88 60       	ori	r24, 0x08	; 8
    1100:	8c 93       	st	X, r24

#endif


#if EXTI_INT1_INTIAL_STATE == ENABLED
	SET_BIT(GICR,GICR_INT1);
    1102:	ab e5       	ldi	r26, 0x5B	; 91
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	eb e5       	ldi	r30, 0x5B	; 91
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	80 68       	ori	r24, 0x80	; 128
    110e:	8c 93       	st	X, r24

#else
#error "Wrong EXTI_INT1_INTIAL_STATE configuration option"

#endif
}
    1110:	cf 91       	pop	r28
    1112:	df 91       	pop	r29
    1114:	08 95       	ret

00001116 <EXTI_voidINT2Init>:
void EXTI_voidINT2Init(void)
{
    1116:	df 93       	push	r29
    1118:	cf 93       	push	r28
    111a:	cd b7       	in	r28, 0x3d	; 61
    111c:	de b7       	in	r29, 0x3e	; 62
#if EXTI_INT2_SENSE == FALLING_EDGE
	CLR_BIT(MCUCSR,MCUCSR_ISC2);
    111e:	a4 e5       	ldi	r26, 0x54	; 84
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	e4 e5       	ldi	r30, 0x54	; 84
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	8f 7b       	andi	r24, 0xBF	; 191
    112a:	8c 93       	st	X, r24

#endif


#if EXTI_INT2_INTIAL_STATE == ENABLED
	SET_BIT(GICR,GICR_INT2);
    112c:	ab e5       	ldi	r26, 0x5B	; 91
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	eb e5       	ldi	r30, 0x5B	; 91
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	80 62       	ori	r24, 0x20	; 32
    1138:	8c 93       	st	X, r24

#else
#error "Wrong EXTI_INT2_INTIAL_STATE configuration option"

#endif
}
    113a:	cf 91       	pop	r28
    113c:	df 91       	pop	r29
    113e:	08 95       	ret

00001140 <EXTI_u8SetSenseControl>:


u8 EXTI_u8SetSenseControl(u8 Copy_IntNumber , u8 Copy_u8Sense)
{
    1140:	df 93       	push	r29
    1142:	cf 93       	push	r28
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
    1148:	2b 97       	sbiw	r28, 0x0b	; 11
    114a:	0f b6       	in	r0, 0x3f	; 63
    114c:	f8 94       	cli
    114e:	de bf       	out	0x3e, r29	; 62
    1150:	0f be       	out	0x3f, r0	; 63
    1152:	cd bf       	out	0x3d, r28	; 61
    1154:	8a 83       	std	Y+2, r24	; 0x02
    1156:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_ErrorState=OK;
    1158:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_IntNumber)
    115a:	8a 81       	ldd	r24, Y+2	; 0x02
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	3b 87       	std	Y+11, r19	; 0x0b
    1162:	2a 87       	std	Y+10, r18	; 0x0a
    1164:	8a 85       	ldd	r24, Y+10	; 0x0a
    1166:	9b 85       	ldd	r25, Y+11	; 0x0b
    1168:	81 30       	cpi	r24, 0x01	; 1
    116a:	91 05       	cpc	r25, r1
    116c:	09 f4       	brne	.+2      	; 0x1170 <EXTI_u8SetSenseControl+0x30>
    116e:	6a c0       	rjmp	.+212    	; 0x1244 <EXTI_u8SetSenseControl+0x104>
    1170:	2a 85       	ldd	r18, Y+10	; 0x0a
    1172:	3b 85       	ldd	r19, Y+11	; 0x0b
    1174:	22 30       	cpi	r18, 0x02	; 2
    1176:	31 05       	cpc	r19, r1
    1178:	09 f4       	brne	.+2      	; 0x117c <EXTI_u8SetSenseControl+0x3c>
    117a:	c3 c0       	rjmp	.+390    	; 0x1302 <EXTI_u8SetSenseControl+0x1c2>
    117c:	8a 85       	ldd	r24, Y+10	; 0x0a
    117e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1180:	00 97       	sbiw	r24, 0x00	; 0
    1182:	09 f0       	breq	.+2      	; 0x1186 <EXTI_u8SetSenseControl+0x46>
    1184:	e0 c0       	rjmp	.+448    	; 0x1346 <EXTI_u8SetSenseControl+0x206>
	{
	case	EXTI_INT0 :

		switch(Copy_u8Sense)
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	28 2f       	mov	r18, r24
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	39 87       	std	Y+9, r19	; 0x09
    118e:	28 87       	std	Y+8, r18	; 0x08
    1190:	88 85       	ldd	r24, Y+8	; 0x08
    1192:	99 85       	ldd	r25, Y+9	; 0x09
    1194:	82 30       	cpi	r24, 0x02	; 2
    1196:	91 05       	cpc	r25, r1
    1198:	29 f1       	breq	.+74     	; 0x11e4 <EXTI_u8SetSenseControl+0xa4>
    119a:	28 85       	ldd	r18, Y+8	; 0x08
    119c:	39 85       	ldd	r19, Y+9	; 0x09
    119e:	23 30       	cpi	r18, 0x03	; 3
    11a0:	31 05       	cpc	r19, r1
    11a2:	34 f4       	brge	.+12     	; 0x11b0 <EXTI_u8SetSenseControl+0x70>
    11a4:	88 85       	ldd	r24, Y+8	; 0x08
    11a6:	99 85       	ldd	r25, Y+9	; 0x09
    11a8:	81 30       	cpi	r24, 0x01	; 1
    11aa:	91 05       	cpc	r25, r1
    11ac:	61 f0       	breq	.+24     	; 0x11c6 <EXTI_u8SetSenseControl+0x86>
    11ae:	47 c0       	rjmp	.+142    	; 0x123e <EXTI_u8SetSenseControl+0xfe>
    11b0:	28 85       	ldd	r18, Y+8	; 0x08
    11b2:	39 85       	ldd	r19, Y+9	; 0x09
    11b4:	23 30       	cpi	r18, 0x03	; 3
    11b6:	31 05       	cpc	r19, r1
    11b8:	21 f1       	breq	.+72     	; 0x1202 <EXTI_u8SetSenseControl+0xc2>
    11ba:	88 85       	ldd	r24, Y+8	; 0x08
    11bc:	99 85       	ldd	r25, Y+9	; 0x09
    11be:	84 30       	cpi	r24, 0x04	; 4
    11c0:	91 05       	cpc	r25, r1
    11c2:	71 f1       	breq	.+92     	; 0x1220 <EXTI_u8SetSenseControl+0xe0>
    11c4:	3c c0       	rjmp	.+120    	; 0x123e <EXTI_u8SetSenseControl+0xfe>
		{
		case LOW_LEVEL :	CLR_BIT(MCUCR,MCUCR_ISC00); CLR_BIT(MCUCR,MCUCR_ISC01); break;
    11c6:	a5 e5       	ldi	r26, 0x55	; 85
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e5 e5       	ldi	r30, 0x55	; 85
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	8e 7f       	andi	r24, 0xFE	; 254
    11d2:	8c 93       	st	X, r24
    11d4:	a5 e5       	ldi	r26, 0x55	; 85
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	e5 e5       	ldi	r30, 0x55	; 85
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	8d 7f       	andi	r24, 0xFD	; 253
    11e0:	8c 93       	st	X, r24
    11e2:	b3 c0       	rjmp	.+358    	; 0x134a <EXTI_u8SetSenseControl+0x20a>
		case ON_CHANGE :	SET_BIT(MCUCR,MCUCR_ISC00); CLR_BIT(MCUCR,MCUCR_ISC01); break;
    11e4:	a5 e5       	ldi	r26, 0x55	; 85
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	e5 e5       	ldi	r30, 0x55	; 85
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	81 60       	ori	r24, 0x01	; 1
    11f0:	8c 93       	st	X, r24
    11f2:	a5 e5       	ldi	r26, 0x55	; 85
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	e5 e5       	ldi	r30, 0x55	; 85
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	8d 7f       	andi	r24, 0xFD	; 253
    11fe:	8c 93       	st	X, r24
    1200:	a4 c0       	rjmp	.+328    	; 0x134a <EXTI_u8SetSenseControl+0x20a>
		case FALLING_EDGE :	CLR_BIT(MCUCR,MCUCR_ISC00); SET_BIT(MCUCR,MCUCR_ISC01); break;
    1202:	a5 e5       	ldi	r26, 0x55	; 85
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	e5 e5       	ldi	r30, 0x55	; 85
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	8e 7f       	andi	r24, 0xFE	; 254
    120e:	8c 93       	st	X, r24
    1210:	a5 e5       	ldi	r26, 0x55	; 85
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	e5 e5       	ldi	r30, 0x55	; 85
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	82 60       	ori	r24, 0x02	; 2
    121c:	8c 93       	st	X, r24
    121e:	95 c0       	rjmp	.+298    	; 0x134a <EXTI_u8SetSenseControl+0x20a>
		case RISING_EDGE :	SET_BIT(MCUCR,MCUCR_ISC00); SET_BIT(MCUCR,MCUCR_ISC01); break;
    1220:	a5 e5       	ldi	r26, 0x55	; 85
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	e5 e5       	ldi	r30, 0x55	; 85
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	81 60       	ori	r24, 0x01	; 1
    122c:	8c 93       	st	X, r24
    122e:	a5 e5       	ldi	r26, 0x55	; 85
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	e5 e5       	ldi	r30, 0x55	; 85
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	82 60       	ori	r24, 0x02	; 2
    123a:	8c 93       	st	X, r24
    123c:	86 c0       	rjmp	.+268    	; 0x134a <EXTI_u8SetSenseControl+0x20a>
		default:			Local_ErrorState=NOK;break;
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	89 83       	std	Y+1, r24	; 0x01
    1242:	83 c0       	rjmp	.+262    	; 0x134a <EXTI_u8SetSenseControl+0x20a>

		break;

		case	EXTI_INT1 :

			switch(Copy_u8Sense)
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	3f 83       	std	Y+7, r19	; 0x07
    124c:	2e 83       	std	Y+6, r18	; 0x06
    124e:	8e 81       	ldd	r24, Y+6	; 0x06
    1250:	9f 81       	ldd	r25, Y+7	; 0x07
    1252:	82 30       	cpi	r24, 0x02	; 2
    1254:	91 05       	cpc	r25, r1
    1256:	29 f1       	breq	.+74     	; 0x12a2 <EXTI_u8SetSenseControl+0x162>
    1258:	2e 81       	ldd	r18, Y+6	; 0x06
    125a:	3f 81       	ldd	r19, Y+7	; 0x07
    125c:	23 30       	cpi	r18, 0x03	; 3
    125e:	31 05       	cpc	r19, r1
    1260:	34 f4       	brge	.+12     	; 0x126e <EXTI_u8SetSenseControl+0x12e>
    1262:	8e 81       	ldd	r24, Y+6	; 0x06
    1264:	9f 81       	ldd	r25, Y+7	; 0x07
    1266:	81 30       	cpi	r24, 0x01	; 1
    1268:	91 05       	cpc	r25, r1
    126a:	61 f0       	breq	.+24     	; 0x1284 <EXTI_u8SetSenseControl+0x144>
    126c:	47 c0       	rjmp	.+142    	; 0x12fc <EXTI_u8SetSenseControl+0x1bc>
    126e:	2e 81       	ldd	r18, Y+6	; 0x06
    1270:	3f 81       	ldd	r19, Y+7	; 0x07
    1272:	23 30       	cpi	r18, 0x03	; 3
    1274:	31 05       	cpc	r19, r1
    1276:	21 f1       	breq	.+72     	; 0x12c0 <EXTI_u8SetSenseControl+0x180>
    1278:	8e 81       	ldd	r24, Y+6	; 0x06
    127a:	9f 81       	ldd	r25, Y+7	; 0x07
    127c:	84 30       	cpi	r24, 0x04	; 4
    127e:	91 05       	cpc	r25, r1
    1280:	71 f1       	breq	.+92     	; 0x12de <EXTI_u8SetSenseControl+0x19e>
    1282:	3c c0       	rjmp	.+120    	; 0x12fc <EXTI_u8SetSenseControl+0x1bc>
			{
			case LOW_LEVEL :	CLR_BIT(MCUCR,MCUCR_ISC10); CLR_BIT(MCUCR,MCUCR_ISC11); break;
    1284:	a5 e5       	ldi	r26, 0x55	; 85
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	e5 e5       	ldi	r30, 0x55	; 85
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	8b 7f       	andi	r24, 0xFB	; 251
    1290:	8c 93       	st	X, r24
    1292:	a5 e5       	ldi	r26, 0x55	; 85
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	e5 e5       	ldi	r30, 0x55	; 85
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	87 7f       	andi	r24, 0xF7	; 247
    129e:	8c 93       	st	X, r24
    12a0:	54 c0       	rjmp	.+168    	; 0x134a <EXTI_u8SetSenseControl+0x20a>
			case ON_CHANGE :	SET_BIT(MCUCR,MCUCR_ISC10); CLR_BIT(MCUCR,MCUCR_ISC11); break;
    12a2:	a5 e5       	ldi	r26, 0x55	; 85
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e5 e5       	ldi	r30, 0x55	; 85
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	84 60       	ori	r24, 0x04	; 4
    12ae:	8c 93       	st	X, r24
    12b0:	a5 e5       	ldi	r26, 0x55	; 85
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	e5 e5       	ldi	r30, 0x55	; 85
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	87 7f       	andi	r24, 0xF7	; 247
    12bc:	8c 93       	st	X, r24
    12be:	45 c0       	rjmp	.+138    	; 0x134a <EXTI_u8SetSenseControl+0x20a>
			case FALLING_EDGE :	CLR_BIT(MCUCR,MCUCR_ISC10); SET_BIT(MCUCR,MCUCR_ISC11); break;
    12c0:	a5 e5       	ldi	r26, 0x55	; 85
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	e5 e5       	ldi	r30, 0x55	; 85
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	8b 7f       	andi	r24, 0xFB	; 251
    12cc:	8c 93       	st	X, r24
    12ce:	a5 e5       	ldi	r26, 0x55	; 85
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	e5 e5       	ldi	r30, 0x55	; 85
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	88 60       	ori	r24, 0x08	; 8
    12da:	8c 93       	st	X, r24
    12dc:	36 c0       	rjmp	.+108    	; 0x134a <EXTI_u8SetSenseControl+0x20a>
			case RISING_EDGE :	SET_BIT(MCUCR,MCUCR_ISC10); SET_BIT(MCUCR,MCUCR_ISC11); break;
    12de:	a5 e5       	ldi	r26, 0x55	; 85
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	e5 e5       	ldi	r30, 0x55	; 85
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	84 60       	ori	r24, 0x04	; 4
    12ea:	8c 93       	st	X, r24
    12ec:	a5 e5       	ldi	r26, 0x55	; 85
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	e5 e5       	ldi	r30, 0x55	; 85
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	88 60       	ori	r24, 0x08	; 8
    12f8:	8c 93       	st	X, r24
    12fa:	27 c0       	rjmp	.+78     	; 0x134a <EXTI_u8SetSenseControl+0x20a>
			default:			Local_ErrorState=NOK;break;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	89 83       	std	Y+1, r24	; 0x01
    1300:	24 c0       	rjmp	.+72     	; 0x134a <EXTI_u8SetSenseControl+0x20a>

			break;

			case	EXTI_INT2 :

				switch(Copy_u8Sense)
    1302:	8b 81       	ldd	r24, Y+3	; 0x03
    1304:	28 2f       	mov	r18, r24
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	3d 83       	std	Y+5, r19	; 0x05
    130a:	2c 83       	std	Y+4, r18	; 0x04
    130c:	8c 81       	ldd	r24, Y+4	; 0x04
    130e:	9d 81       	ldd	r25, Y+5	; 0x05
    1310:	83 30       	cpi	r24, 0x03	; 3
    1312:	91 05       	cpc	r25, r1
    1314:	69 f0       	breq	.+26     	; 0x1330 <EXTI_u8SetSenseControl+0x1f0>
    1316:	2c 81       	ldd	r18, Y+4	; 0x04
    1318:	3d 81       	ldd	r19, Y+5	; 0x05
    131a:	24 30       	cpi	r18, 0x04	; 4
    131c:	31 05       	cpc	r19, r1
    131e:	81 f4       	brne	.+32     	; 0x1340 <EXTI_u8SetSenseControl+0x200>
				{
				case RISING_EDGE :	SET_BIT(MCUCR,MCUCSR_ISC2); break;
    1320:	a5 e5       	ldi	r26, 0x55	; 85
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	e5 e5       	ldi	r30, 0x55	; 85
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	80 64       	ori	r24, 0x40	; 64
    132c:	8c 93       	st	X, r24
    132e:	0d c0       	rjmp	.+26     	; 0x134a <EXTI_u8SetSenseControl+0x20a>
				case FALLING_EDGE :	CLR_BIT(MCUCR,MCUCSR_ISC2); break;
    1330:	a5 e5       	ldi	r26, 0x55	; 85
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e5 e5       	ldi	r30, 0x55	; 85
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	8f 7b       	andi	r24, 0xBF	; 191
    133c:	8c 93       	st	X, r24
    133e:	05 c0       	rjmp	.+10     	; 0x134a <EXTI_u8SetSenseControl+0x20a>
				default:			Local_ErrorState=NOK;break;
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	89 83       	std	Y+1, r24	; 0x01
    1344:	02 c0       	rjmp	.+4      	; 0x134a <EXTI_u8SetSenseControl+0x20a>
				}

				break;

				default	: Local_ErrorState=NOK;
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	89 83       	std	Y+1, r24	; 0x01
				break;
	}

	return Local_ErrorState ;
    134a:	89 81       	ldd	r24, Y+1	; 0x01
}
    134c:	2b 96       	adiw	r28, 0x0b	; 11
    134e:	0f b6       	in	r0, 0x3f	; 63
    1350:	f8 94       	cli
    1352:	de bf       	out	0x3e, r29	; 62
    1354:	0f be       	out	0x3f, r0	; 63
    1356:	cd bf       	out	0x3d, r28	; 61
    1358:	cf 91       	pop	r28
    135a:	df 91       	pop	r29
    135c:	08 95       	ret

0000135e <EXTI_u8EnableInterrupt>:
u8 EXTI_u8EnableInterrupt(u8 Copy_u8IntNumber)
{
    135e:	df 93       	push	r29
    1360:	cf 93       	push	r28
    1362:	00 d0       	rcall	.+0      	; 0x1364 <EXTI_u8EnableInterrupt+0x6>
    1364:	00 d0       	rcall	.+0      	; 0x1366 <EXTI_u8EnableInterrupt+0x8>
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
    136a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    136c:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8IntNumber)
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	3c 83       	std	Y+4, r19	; 0x04
    1376:	2b 83       	std	Y+3, r18	; 0x03
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	9c 81       	ldd	r25, Y+4	; 0x04
    137c:	81 30       	cpi	r24, 0x01	; 1
    137e:	91 05       	cpc	r25, r1
    1380:	89 f0       	breq	.+34     	; 0x13a4 <EXTI_u8EnableInterrupt+0x46>
    1382:	2b 81       	ldd	r18, Y+3	; 0x03
    1384:	3c 81       	ldd	r19, Y+4	; 0x04
    1386:	22 30       	cpi	r18, 0x02	; 2
    1388:	31 05       	cpc	r19, r1
    138a:	a1 f0       	breq	.+40     	; 0x13b4 <EXTI_u8EnableInterrupt+0x56>
    138c:	8b 81       	ldd	r24, Y+3	; 0x03
    138e:	9c 81       	ldd	r25, Y+4	; 0x04
    1390:	00 97       	sbiw	r24, 0x00	; 0
    1392:	c1 f4       	brne	.+48     	; 0x13c4 <EXTI_u8EnableInterrupt+0x66>
	{
	case EXTI_INT0 : SET_BIT(GICR,GICR_INT0); break;
    1394:	ab e5       	ldi	r26, 0x5B	; 91
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	eb e5       	ldi	r30, 0x5B	; 91
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	80 64       	ori	r24, 0x40	; 64
    13a0:	8c 93       	st	X, r24
    13a2:	12 c0       	rjmp	.+36     	; 0x13c8 <EXTI_u8EnableInterrupt+0x6a>
	case EXTI_INT1 : SET_BIT(GICR,GICR_INT1); break;
    13a4:	ab e5       	ldi	r26, 0x5B	; 91
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	eb e5       	ldi	r30, 0x5B	; 91
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	80 68       	ori	r24, 0x80	; 128
    13b0:	8c 93       	st	X, r24
    13b2:	0a c0       	rjmp	.+20     	; 0x13c8 <EXTI_u8EnableInterrupt+0x6a>
	case EXTI_INT2 : SET_BIT(GICR,GICR_INT2); break;
    13b4:	ab e5       	ldi	r26, 0x5B	; 91
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	eb e5       	ldi	r30, 0x5B	; 91
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	80 62       	ori	r24, 0x20	; 32
    13c0:	8c 93       	st	X, r24
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <EXTI_u8EnableInterrupt+0x6a>
	default : Local_u8ErrorState=NOK;
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    13c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	cf 91       	pop	r28
    13d4:	df 91       	pop	r29
    13d6:	08 95       	ret

000013d8 <EXTI_u8DisableInterrupt>:
u8 EXTI_u8DisableInterrupt(u8 Copy_u8IntNumber)
{
    13d8:	df 93       	push	r29
    13da:	cf 93       	push	r28
    13dc:	00 d0       	rcall	.+0      	; 0x13de <EXTI_u8DisableInterrupt+0x6>
    13de:	00 d0       	rcall	.+0      	; 0x13e0 <EXTI_u8DisableInterrupt+0x8>
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
    13e4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    13e6:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8IntNumber)
    13e8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	3c 83       	std	Y+4, r19	; 0x04
    13f0:	2b 83       	std	Y+3, r18	; 0x03
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
    13f4:	9c 81       	ldd	r25, Y+4	; 0x04
    13f6:	81 30       	cpi	r24, 0x01	; 1
    13f8:	91 05       	cpc	r25, r1
    13fa:	89 f0       	breq	.+34     	; 0x141e <EXTI_u8DisableInterrupt+0x46>
    13fc:	2b 81       	ldd	r18, Y+3	; 0x03
    13fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1400:	22 30       	cpi	r18, 0x02	; 2
    1402:	31 05       	cpc	r19, r1
    1404:	a1 f0       	breq	.+40     	; 0x142e <EXTI_u8DisableInterrupt+0x56>
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	9c 81       	ldd	r25, Y+4	; 0x04
    140a:	00 97       	sbiw	r24, 0x00	; 0
    140c:	c1 f4       	brne	.+48     	; 0x143e <EXTI_u8DisableInterrupt+0x66>
	{
	case EXTI_INT0 : CLR_BIT(GICR,GICR_INT0); break;
    140e:	ab e5       	ldi	r26, 0x5B	; 91
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	eb e5       	ldi	r30, 0x5B	; 91
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	8f 7b       	andi	r24, 0xBF	; 191
    141a:	8c 93       	st	X, r24
    141c:	12 c0       	rjmp	.+36     	; 0x1442 <EXTI_u8DisableInterrupt+0x6a>
	case EXTI_INT1 : CLR_BIT(GICR,GICR_INT1); break;
    141e:	ab e5       	ldi	r26, 0x5B	; 91
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	eb e5       	ldi	r30, 0x5B	; 91
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	8f 77       	andi	r24, 0x7F	; 127
    142a:	8c 93       	st	X, r24
    142c:	0a c0       	rjmp	.+20     	; 0x1442 <EXTI_u8DisableInterrupt+0x6a>
	case EXTI_INT2 : CLR_BIT(GICR,GICR_INT2); break;
    142e:	ab e5       	ldi	r26, 0x5B	; 91
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	eb e5       	ldi	r30, 0x5B	; 91
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	8f 7d       	andi	r24, 0xDF	; 223
    143a:	8c 93       	st	X, r24
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <EXTI_u8DisableInterrupt+0x6a>
	default : Local_u8ErrorState=NOK;
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1442:	89 81       	ldd	r24, Y+1	; 0x01
}
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <EXTI_u8INTSetCallBack>:

u8 EXTI_u8INTSetCallBack(void (*Copy_pvCallBackFunc)(void),u8 Copy_u8IntNumber)
{
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	00 d0       	rcall	.+0      	; 0x1458 <EXTI_u8INTSetCallBack+0x6>
    1458:	00 d0       	rcall	.+0      	; 0x145a <EXTI_u8INTSetCallBack+0x8>
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
    145e:	9b 83       	std	Y+3, r25	; 0x03
    1460:	8a 83       	std	Y+2, r24	; 0x02
    1462:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = OK;
    1464:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvCallBackFunc != NULL)
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
    1468:	9b 81       	ldd	r25, Y+3	; 0x03
    146a:	00 97       	sbiw	r24, 0x00	; 0
    146c:	69 f0       	breq	.+26     	; 0x1488 <EXTI_u8INTSetCallBack+0x36>
	{
		EXTI_pvINTCallBackFunc[Copy_u8IntNumber]=Copy_pvCallBackFunc;
    146e:	8c 81       	ldd	r24, Y+4	; 0x04
    1470:	88 2f       	mov	r24, r24
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	88 0f       	add	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	fc 01       	movw	r30, r24
    147a:	e6 58       	subi	r30, 0x86	; 134
    147c:	ff 4f       	sbci	r31, 0xFF	; 255
    147e:	8a 81       	ldd	r24, Y+2	; 0x02
    1480:	9b 81       	ldd	r25, Y+3	; 0x03
    1482:	91 83       	std	Z+1, r25	; 0x01
    1484:	80 83       	st	Z, r24
    1486:	02 c0       	rjmp	.+4      	; 0x148c <EXTI_u8INTSetCallBack+0x3a>
	}
	else
	{
		Local_u8ErrorState=NULL_POINTER;
    1488:	82 e0       	ldi	r24, 0x02	; 2
    148a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    148c:	89 81       	ldd	r24, Y+1	; 0x01
}
    148e:	0f 90       	pop	r0
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	cf 91       	pop	r28
    1498:	df 91       	pop	r29
    149a:	08 95       	ret

0000149c <__vector_1>:

void __vector_1 (void) __attribute__((signal));
void __vector_1(void)
{
    149c:	1f 92       	push	r1
    149e:	0f 92       	push	r0
    14a0:	0f b6       	in	r0, 0x3f	; 63
    14a2:	0f 92       	push	r0
    14a4:	11 24       	eor	r1, r1
    14a6:	2f 93       	push	r18
    14a8:	3f 93       	push	r19
    14aa:	4f 93       	push	r20
    14ac:	5f 93       	push	r21
    14ae:	6f 93       	push	r22
    14b0:	7f 93       	push	r23
    14b2:	8f 93       	push	r24
    14b4:	9f 93       	push	r25
    14b6:	af 93       	push	r26
    14b8:	bf 93       	push	r27
    14ba:	ef 93       	push	r30
    14bc:	ff 93       	push	r31
    14be:	df 93       	push	r29
    14c0:	cf 93       	push	r28
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvINTCallBackFunc[EXTI_INT0] != NULL)
    14c6:	80 91 7a 00 	lds	r24, 0x007A
    14ca:	90 91 7b 00 	lds	r25, 0x007B
    14ce:	00 97       	sbiw	r24, 0x00	; 0
    14d0:	29 f0       	breq	.+10     	; 0x14dc <__vector_1+0x40>
	{
		EXTI_pvINTCallBackFunc[EXTI_INT0]();
    14d2:	e0 91 7a 00 	lds	r30, 0x007A
    14d6:	f0 91 7b 00 	lds	r31, 0x007B
    14da:	09 95       	icall
	}
	else
	{

	}
}
    14dc:	cf 91       	pop	r28
    14de:	df 91       	pop	r29
    14e0:	ff 91       	pop	r31
    14e2:	ef 91       	pop	r30
    14e4:	bf 91       	pop	r27
    14e6:	af 91       	pop	r26
    14e8:	9f 91       	pop	r25
    14ea:	8f 91       	pop	r24
    14ec:	7f 91       	pop	r23
    14ee:	6f 91       	pop	r22
    14f0:	5f 91       	pop	r21
    14f2:	4f 91       	pop	r20
    14f4:	3f 91       	pop	r19
    14f6:	2f 91       	pop	r18
    14f8:	0f 90       	pop	r0
    14fa:	0f be       	out	0x3f, r0	; 63
    14fc:	0f 90       	pop	r0
    14fe:	1f 90       	pop	r1
    1500:	18 95       	reti

00001502 <__vector_2>:
void __vector_2 (void) __attribute__((signal));
void __vector_2(void)
{
    1502:	1f 92       	push	r1
    1504:	0f 92       	push	r0
    1506:	0f b6       	in	r0, 0x3f	; 63
    1508:	0f 92       	push	r0
    150a:	11 24       	eor	r1, r1
    150c:	2f 93       	push	r18
    150e:	3f 93       	push	r19
    1510:	4f 93       	push	r20
    1512:	5f 93       	push	r21
    1514:	6f 93       	push	r22
    1516:	7f 93       	push	r23
    1518:	8f 93       	push	r24
    151a:	9f 93       	push	r25
    151c:	af 93       	push	r26
    151e:	bf 93       	push	r27
    1520:	ef 93       	push	r30
    1522:	ff 93       	push	r31
    1524:	df 93       	push	r29
    1526:	cf 93       	push	r28
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvINTCallBackFunc[EXTI_INT1] != NULL)
    152c:	80 91 7c 00 	lds	r24, 0x007C
    1530:	90 91 7d 00 	lds	r25, 0x007D
    1534:	00 97       	sbiw	r24, 0x00	; 0
    1536:	29 f0       	breq	.+10     	; 0x1542 <__vector_2+0x40>
	{
		EXTI_pvINTCallBackFunc[EXTI_INT1]();
    1538:	e0 91 7c 00 	lds	r30, 0x007C
    153c:	f0 91 7d 00 	lds	r31, 0x007D
    1540:	09 95       	icall
	}
	else
	{

	}
}
    1542:	cf 91       	pop	r28
    1544:	df 91       	pop	r29
    1546:	ff 91       	pop	r31
    1548:	ef 91       	pop	r30
    154a:	bf 91       	pop	r27
    154c:	af 91       	pop	r26
    154e:	9f 91       	pop	r25
    1550:	8f 91       	pop	r24
    1552:	7f 91       	pop	r23
    1554:	6f 91       	pop	r22
    1556:	5f 91       	pop	r21
    1558:	4f 91       	pop	r20
    155a:	3f 91       	pop	r19
    155c:	2f 91       	pop	r18
    155e:	0f 90       	pop	r0
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	0f 90       	pop	r0
    1564:	1f 90       	pop	r1
    1566:	18 95       	reti

00001568 <__vector_3>:
void __vector_3 (void) __attribute__((signal));
void __vector_3(void)
{
    1568:	1f 92       	push	r1
    156a:	0f 92       	push	r0
    156c:	0f b6       	in	r0, 0x3f	; 63
    156e:	0f 92       	push	r0
    1570:	11 24       	eor	r1, r1
    1572:	2f 93       	push	r18
    1574:	3f 93       	push	r19
    1576:	4f 93       	push	r20
    1578:	5f 93       	push	r21
    157a:	6f 93       	push	r22
    157c:	7f 93       	push	r23
    157e:	8f 93       	push	r24
    1580:	9f 93       	push	r25
    1582:	af 93       	push	r26
    1584:	bf 93       	push	r27
    1586:	ef 93       	push	r30
    1588:	ff 93       	push	r31
    158a:	df 93       	push	r29
    158c:	cf 93       	push	r28
    158e:	cd b7       	in	r28, 0x3d	; 61
    1590:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvINTCallBackFunc[EXTI_INT2] != NULL)
    1592:	80 91 7e 00 	lds	r24, 0x007E
    1596:	90 91 7f 00 	lds	r25, 0x007F
    159a:	00 97       	sbiw	r24, 0x00	; 0
    159c:	29 f0       	breq	.+10     	; 0x15a8 <__vector_3+0x40>
	{
		EXTI_pvINTCallBackFunc[EXTI_INT2]();
    159e:	e0 91 7e 00 	lds	r30, 0x007E
    15a2:	f0 91 7f 00 	lds	r31, 0x007F
    15a6:	09 95       	icall
	}
	else
	{

	}
}
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	ff 91       	pop	r31
    15ae:	ef 91       	pop	r30
    15b0:	bf 91       	pop	r27
    15b2:	af 91       	pop	r26
    15b4:	9f 91       	pop	r25
    15b6:	8f 91       	pop	r24
    15b8:	7f 91       	pop	r23
    15ba:	6f 91       	pop	r22
    15bc:	5f 91       	pop	r21
    15be:	4f 91       	pop	r20
    15c0:	3f 91       	pop	r19
    15c2:	2f 91       	pop	r18
    15c4:	0f 90       	pop	r0
    15c6:	0f be       	out	0x3f, r0	; 63
    15c8:	0f 90       	pop	r0
    15ca:	1f 90       	pop	r1
    15cc:	18 95       	reti

000015ce <DIO_u8SetPinDirection>:
#include "DIO_config.h"
#include "DIO_private.h"
#include "DIO_register.h"

u8 DIO_u8SetPinDirection  (u8 Copy_u8Port, u8 Copy_u8Pin , u8 Copy_u8Direction)
{
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
    15d6:	28 97       	sbiw	r28, 0x08	; 8
    15d8:	0f b6       	in	r0, 0x3f	; 63
    15da:	f8 94       	cli
    15dc:	de bf       	out	0x3e, r29	; 62
    15de:	0f be       	out	0x3f, r0	; 63
    15e0:	cd bf       	out	0x3d, r28	; 61
    15e2:	8a 83       	std	Y+2, r24	; 0x02
    15e4:	6b 83       	std	Y+3, r22	; 0x03
    15e6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=OK;
    15e8:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<=DIO_u8PIN7)
    15ea:	8b 81       	ldd	r24, Y+3	; 0x03
    15ec:	88 30       	cpi	r24, 0x08	; 8
    15ee:	08 f0       	brcs	.+2      	; 0x15f2 <DIO_u8SetPinDirection+0x24>
    15f0:	f4 c0       	rjmp	.+488    	; 0x17da <DIO_u8SetPinDirection+0x20c>
	{
		if (Copy_u8Direction==DIO_u8PIN_OUTPUT)
    15f2:	8c 81       	ldd	r24, Y+4	; 0x04
    15f4:	81 30       	cpi	r24, 0x01	; 1
    15f6:	09 f0       	breq	.+2      	; 0x15fa <DIO_u8SetPinDirection+0x2c>
    15f8:	72 c0       	rjmp	.+228    	; 0x16de <DIO_u8SetPinDirection+0x110>
		{
			switch (Copy_u8Port)
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	28 2f       	mov	r18, r24
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	38 87       	std	Y+8, r19	; 0x08
    1602:	2f 83       	std	Y+7, r18	; 0x07
    1604:	8f 81       	ldd	r24, Y+7	; 0x07
    1606:	98 85       	ldd	r25, Y+8	; 0x08
    1608:	81 30       	cpi	r24, 0x01	; 1
    160a:	91 05       	cpc	r25, r1
    160c:	49 f1       	breq	.+82     	; 0x1660 <DIO_u8SetPinDirection+0x92>
    160e:	2f 81       	ldd	r18, Y+7	; 0x07
    1610:	38 85       	ldd	r19, Y+8	; 0x08
    1612:	22 30       	cpi	r18, 0x02	; 2
    1614:	31 05       	cpc	r19, r1
    1616:	2c f4       	brge	.+10     	; 0x1622 <DIO_u8SetPinDirection+0x54>
    1618:	8f 81       	ldd	r24, Y+7	; 0x07
    161a:	98 85       	ldd	r25, Y+8	; 0x08
    161c:	00 97       	sbiw	r24, 0x00	; 0
    161e:	61 f0       	breq	.+24     	; 0x1638 <DIO_u8SetPinDirection+0x6a>
    1620:	5b c0       	rjmp	.+182    	; 0x16d8 <DIO_u8SetPinDirection+0x10a>
    1622:	2f 81       	ldd	r18, Y+7	; 0x07
    1624:	38 85       	ldd	r19, Y+8	; 0x08
    1626:	22 30       	cpi	r18, 0x02	; 2
    1628:	31 05       	cpc	r19, r1
    162a:	71 f1       	breq	.+92     	; 0x1688 <DIO_u8SetPinDirection+0xba>
    162c:	8f 81       	ldd	r24, Y+7	; 0x07
    162e:	98 85       	ldd	r25, Y+8	; 0x08
    1630:	83 30       	cpi	r24, 0x03	; 3
    1632:	91 05       	cpc	r25, r1
    1634:	e9 f1       	breq	.+122    	; 0x16b0 <DIO_u8SetPinDirection+0xe2>
    1636:	50 c0       	rjmp	.+160    	; 0x16d8 <DIO_u8SetPinDirection+0x10a>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
    1638:	aa e3       	ldi	r26, 0x3A	; 58
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	ea e3       	ldi	r30, 0x3A	; 58
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	48 2f       	mov	r20, r24
    1644:	8b 81       	ldd	r24, Y+3	; 0x03
    1646:	28 2f       	mov	r18, r24
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	02 2e       	mov	r0, r18
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <DIO_u8SetPinDirection+0x88>
    1652:	88 0f       	add	r24, r24
    1654:	99 1f       	adc	r25, r25
    1656:	0a 94       	dec	r0
    1658:	e2 f7       	brpl	.-8      	; 0x1652 <DIO_u8SetPinDirection+0x84>
    165a:	84 2b       	or	r24, r20
    165c:	8c 93       	st	X, r24
    165e:	bf c0       	rjmp	.+382    	; 0x17de <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
    1660:	a7 e3       	ldi	r26, 0x37	; 55
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	e7 e3       	ldi	r30, 0x37	; 55
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	48 2f       	mov	r20, r24
    166c:	8b 81       	ldd	r24, Y+3	; 0x03
    166e:	28 2f       	mov	r18, r24
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	02 2e       	mov	r0, r18
    1678:	02 c0       	rjmp	.+4      	; 0x167e <DIO_u8SetPinDirection+0xb0>
    167a:	88 0f       	add	r24, r24
    167c:	99 1f       	adc	r25, r25
    167e:	0a 94       	dec	r0
    1680:	e2 f7       	brpl	.-8      	; 0x167a <DIO_u8SetPinDirection+0xac>
    1682:	84 2b       	or	r24, r20
    1684:	8c 93       	st	X, r24
    1686:	ab c0       	rjmp	.+342    	; 0x17de <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
    1688:	a4 e3       	ldi	r26, 0x34	; 52
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	e4 e3       	ldi	r30, 0x34	; 52
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	48 2f       	mov	r20, r24
    1694:	8b 81       	ldd	r24, Y+3	; 0x03
    1696:	28 2f       	mov	r18, r24
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	02 2e       	mov	r0, r18
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <DIO_u8SetPinDirection+0xd8>
    16a2:	88 0f       	add	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	0a 94       	dec	r0
    16a8:	e2 f7       	brpl	.-8      	; 0x16a2 <DIO_u8SetPinDirection+0xd4>
    16aa:	84 2b       	or	r24, r20
    16ac:	8c 93       	st	X, r24
    16ae:	97 c0       	rjmp	.+302    	; 0x17de <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
    16b0:	a1 e3       	ldi	r26, 0x31	; 49
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	e1 e3       	ldi	r30, 0x31	; 49
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	48 2f       	mov	r20, r24
    16bc:	8b 81       	ldd	r24, Y+3	; 0x03
    16be:	28 2f       	mov	r18, r24
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	02 2e       	mov	r0, r18
    16c8:	02 c0       	rjmp	.+4      	; 0x16ce <DIO_u8SetPinDirection+0x100>
    16ca:	88 0f       	add	r24, r24
    16cc:	99 1f       	adc	r25, r25
    16ce:	0a 94       	dec	r0
    16d0:	e2 f7       	brpl	.-8      	; 0x16ca <DIO_u8SetPinDirection+0xfc>
    16d2:	84 2b       	or	r24, r20
    16d4:	8c 93       	st	X, r24
    16d6:	83 c0       	rjmp	.+262    	; 0x17de <DIO_u8SetPinDirection+0x210>
			default : Local_u8ErrorState=NOK;
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	89 83       	std	Y+1, r24	; 0x01
    16dc:	80 c0       	rjmp	.+256    	; 0x17de <DIO_u8SetPinDirection+0x210>
			}
		}
		else if (Copy_u8Direction==DIO_u8PIN_INPUT)
    16de:	8c 81       	ldd	r24, Y+4	; 0x04
    16e0:	88 23       	and	r24, r24
    16e2:	09 f0       	breq	.+2      	; 0x16e6 <DIO_u8SetPinDirection+0x118>
    16e4:	77 c0       	rjmp	.+238    	; 0x17d4 <DIO_u8SetPinDirection+0x206>
		{
			switch (Copy_u8Port)
    16e6:	8a 81       	ldd	r24, Y+2	; 0x02
    16e8:	28 2f       	mov	r18, r24
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	3e 83       	std	Y+6, r19	; 0x06
    16ee:	2d 83       	std	Y+5, r18	; 0x05
    16f0:	8d 81       	ldd	r24, Y+5	; 0x05
    16f2:	9e 81       	ldd	r25, Y+6	; 0x06
    16f4:	81 30       	cpi	r24, 0x01	; 1
    16f6:	91 05       	cpc	r25, r1
    16f8:	59 f1       	breq	.+86     	; 0x1750 <DIO_u8SetPinDirection+0x182>
    16fa:	2d 81       	ldd	r18, Y+5	; 0x05
    16fc:	3e 81       	ldd	r19, Y+6	; 0x06
    16fe:	22 30       	cpi	r18, 0x02	; 2
    1700:	31 05       	cpc	r19, r1
    1702:	2c f4       	brge	.+10     	; 0x170e <DIO_u8SetPinDirection+0x140>
    1704:	8d 81       	ldd	r24, Y+5	; 0x05
    1706:	9e 81       	ldd	r25, Y+6	; 0x06
    1708:	00 97       	sbiw	r24, 0x00	; 0
    170a:	69 f0       	breq	.+26     	; 0x1726 <DIO_u8SetPinDirection+0x158>
    170c:	60 c0       	rjmp	.+192    	; 0x17ce <DIO_u8SetPinDirection+0x200>
    170e:	2d 81       	ldd	r18, Y+5	; 0x05
    1710:	3e 81       	ldd	r19, Y+6	; 0x06
    1712:	22 30       	cpi	r18, 0x02	; 2
    1714:	31 05       	cpc	r19, r1
    1716:	89 f1       	breq	.+98     	; 0x177a <DIO_u8SetPinDirection+0x1ac>
    1718:	8d 81       	ldd	r24, Y+5	; 0x05
    171a:	9e 81       	ldd	r25, Y+6	; 0x06
    171c:	83 30       	cpi	r24, 0x03	; 3
    171e:	91 05       	cpc	r25, r1
    1720:	09 f4       	brne	.+2      	; 0x1724 <DIO_u8SetPinDirection+0x156>
    1722:	40 c0       	rjmp	.+128    	; 0x17a4 <DIO_u8SetPinDirection+0x1d6>
    1724:	54 c0       	rjmp	.+168    	; 0x17ce <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
    1726:	aa e3       	ldi	r26, 0x3A	; 58
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	ea e3       	ldi	r30, 0x3A	; 58
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	48 2f       	mov	r20, r24
    1732:	8b 81       	ldd	r24, Y+3	; 0x03
    1734:	28 2f       	mov	r18, r24
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	02 2e       	mov	r0, r18
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <DIO_u8SetPinDirection+0x176>
    1740:	88 0f       	add	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	0a 94       	dec	r0
    1746:	e2 f7       	brpl	.-8      	; 0x1740 <DIO_u8SetPinDirection+0x172>
    1748:	80 95       	com	r24
    174a:	84 23       	and	r24, r20
    174c:	8c 93       	st	X, r24
    174e:	47 c0       	rjmp	.+142    	; 0x17de <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
    1750:	a7 e3       	ldi	r26, 0x37	; 55
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	e7 e3       	ldi	r30, 0x37	; 55
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	48 2f       	mov	r20, r24
    175c:	8b 81       	ldd	r24, Y+3	; 0x03
    175e:	28 2f       	mov	r18, r24
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	02 2e       	mov	r0, r18
    1768:	02 c0       	rjmp	.+4      	; 0x176e <DIO_u8SetPinDirection+0x1a0>
    176a:	88 0f       	add	r24, r24
    176c:	99 1f       	adc	r25, r25
    176e:	0a 94       	dec	r0
    1770:	e2 f7       	brpl	.-8      	; 0x176a <DIO_u8SetPinDirection+0x19c>
    1772:	80 95       	com	r24
    1774:	84 23       	and	r24, r20
    1776:	8c 93       	st	X, r24
    1778:	32 c0       	rjmp	.+100    	; 0x17de <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
    177a:	a4 e3       	ldi	r26, 0x34	; 52
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	e4 e3       	ldi	r30, 0x34	; 52
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	48 2f       	mov	r20, r24
    1786:	8b 81       	ldd	r24, Y+3	; 0x03
    1788:	28 2f       	mov	r18, r24
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	02 2e       	mov	r0, r18
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <DIO_u8SetPinDirection+0x1ca>
    1794:	88 0f       	add	r24, r24
    1796:	99 1f       	adc	r25, r25
    1798:	0a 94       	dec	r0
    179a:	e2 f7       	brpl	.-8      	; 0x1794 <DIO_u8SetPinDirection+0x1c6>
    179c:	80 95       	com	r24
    179e:	84 23       	and	r24, r20
    17a0:	8c 93       	st	X, r24
    17a2:	1d c0       	rjmp	.+58     	; 0x17de <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
    17a4:	a1 e3       	ldi	r26, 0x31	; 49
    17a6:	b0 e0       	ldi	r27, 0x00	; 0
    17a8:	e1 e3       	ldi	r30, 0x31	; 49
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	48 2f       	mov	r20, r24
    17b0:	8b 81       	ldd	r24, Y+3	; 0x03
    17b2:	28 2f       	mov	r18, r24
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	02 2e       	mov	r0, r18
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <DIO_u8SetPinDirection+0x1f4>
    17be:	88 0f       	add	r24, r24
    17c0:	99 1f       	adc	r25, r25
    17c2:	0a 94       	dec	r0
    17c4:	e2 f7       	brpl	.-8      	; 0x17be <DIO_u8SetPinDirection+0x1f0>
    17c6:	80 95       	com	r24
    17c8:	84 23       	and	r24, r20
    17ca:	8c 93       	st	X, r24
    17cc:	08 c0       	rjmp	.+16     	; 0x17de <DIO_u8SetPinDirection+0x210>
			default : Local_u8ErrorState=NOK;
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	89 83       	std	Y+1, r24	; 0x01
    17d2:	05 c0       	rjmp	.+10     	; 0x17de <DIO_u8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=NOK;
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	89 83       	std	Y+1, r24	; 0x01
    17d8:	02 c0       	rjmp	.+4      	; 0x17de <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=NOK;
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    17de:	89 81       	ldd	r24, Y+1	; 0x01
}
    17e0:	28 96       	adiw	r28, 0x08	; 8
    17e2:	0f b6       	in	r0, 0x3f	; 63
    17e4:	f8 94       	cli
    17e6:	de bf       	out	0x3e, r29	; 62
    17e8:	0f be       	out	0x3f, r0	; 63
    17ea:	cd bf       	out	0x3d, r28	; 61
    17ec:	cf 91       	pop	r28
    17ee:	df 91       	pop	r29
    17f0:	08 95       	ret

000017f2 <DIO_u8SetPortDirection>:
u8 DIO_u8SetPortDirection (u8 Copy_u8Port, u8 Copy_u8Direction)
{
    17f2:	df 93       	push	r29
    17f4:	cf 93       	push	r28
    17f6:	00 d0       	rcall	.+0      	; 0x17f8 <DIO_u8SetPortDirection+0x6>
    17f8:	00 d0       	rcall	.+0      	; 0x17fa <DIO_u8SetPortDirection+0x8>
    17fa:	0f 92       	push	r0
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
    1800:	8a 83       	std	Y+2, r24	; 0x02
    1802:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
    1804:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8Port)
    1806:	8a 81       	ldd	r24, Y+2	; 0x02
    1808:	28 2f       	mov	r18, r24
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	3d 83       	std	Y+5, r19	; 0x05
    180e:	2c 83       	std	Y+4, r18	; 0x04
    1810:	8c 81       	ldd	r24, Y+4	; 0x04
    1812:	9d 81       	ldd	r25, Y+5	; 0x05
    1814:	81 30       	cpi	r24, 0x01	; 1
    1816:	91 05       	cpc	r25, r1
    1818:	d1 f0       	breq	.+52     	; 0x184e <DIO_u8SetPortDirection+0x5c>
    181a:	2c 81       	ldd	r18, Y+4	; 0x04
    181c:	3d 81       	ldd	r19, Y+5	; 0x05
    181e:	22 30       	cpi	r18, 0x02	; 2
    1820:	31 05       	cpc	r19, r1
    1822:	2c f4       	brge	.+10     	; 0x182e <DIO_u8SetPortDirection+0x3c>
    1824:	8c 81       	ldd	r24, Y+4	; 0x04
    1826:	9d 81       	ldd	r25, Y+5	; 0x05
    1828:	00 97       	sbiw	r24, 0x00	; 0
    182a:	61 f0       	breq	.+24     	; 0x1844 <DIO_u8SetPortDirection+0x52>
    182c:	1f c0       	rjmp	.+62     	; 0x186c <DIO_u8SetPortDirection+0x7a>
    182e:	2c 81       	ldd	r18, Y+4	; 0x04
    1830:	3d 81       	ldd	r19, Y+5	; 0x05
    1832:	22 30       	cpi	r18, 0x02	; 2
    1834:	31 05       	cpc	r19, r1
    1836:	81 f0       	breq	.+32     	; 0x1858 <DIO_u8SetPortDirection+0x66>
    1838:	8c 81       	ldd	r24, Y+4	; 0x04
    183a:	9d 81       	ldd	r25, Y+5	; 0x05
    183c:	83 30       	cpi	r24, 0x03	; 3
    183e:	91 05       	cpc	r25, r1
    1840:	81 f0       	breq	.+32     	; 0x1862 <DIO_u8SetPortDirection+0x70>
    1842:	14 c0       	rjmp	.+40     	; 0x186c <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA: DDRA=Copy_u8Direction; break;
    1844:	ea e3       	ldi	r30, 0x3A	; 58
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	8b 81       	ldd	r24, Y+3	; 0x03
    184a:	80 83       	st	Z, r24
    184c:	11 c0       	rjmp	.+34     	; 0x1870 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB: DDRB=Copy_u8Direction; break;
    184e:	e7 e3       	ldi	r30, 0x37	; 55
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	8b 81       	ldd	r24, Y+3	; 0x03
    1854:	80 83       	st	Z, r24
    1856:	0c c0       	rjmp	.+24     	; 0x1870 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC: DDRC=Copy_u8Direction; break;
    1858:	e4 e3       	ldi	r30, 0x34	; 52
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	8b 81       	ldd	r24, Y+3	; 0x03
    185e:	80 83       	st	Z, r24
    1860:	07 c0       	rjmp	.+14     	; 0x1870 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD: DDRD=Copy_u8Direction; break;
    1862:	e1 e3       	ldi	r30, 0x31	; 49
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	8b 81       	ldd	r24, Y+3	; 0x03
    1868:	80 83       	st	Z, r24
    186a:	02 c0       	rjmp	.+4      	; 0x1870 <DIO_u8SetPortDirection+0x7e>
	default : Local_u8ErrorState=NOK;
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
    1870:	89 81       	ldd	r24, Y+1	; 0x01
}
    1872:	0f 90       	pop	r0
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	cf 91       	pop	r28
    187e:	df 91       	pop	r29
    1880:	08 95       	ret

00001882 <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue      (u8 Copy_u8Port, u8 Copy_u8Pin , u8 Copy_u8Value)
{
    1882:	df 93       	push	r29
    1884:	cf 93       	push	r28
    1886:	cd b7       	in	r28, 0x3d	; 61
    1888:	de b7       	in	r29, 0x3e	; 62
    188a:	28 97       	sbiw	r28, 0x08	; 8
    188c:	0f b6       	in	r0, 0x3f	; 63
    188e:	f8 94       	cli
    1890:	de bf       	out	0x3e, r29	; 62
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	cd bf       	out	0x3d, r28	; 61
    1896:	8a 83       	std	Y+2, r24	; 0x02
    1898:	6b 83       	std	Y+3, r22	; 0x03
    189a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=OK;
    189c:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<=DIO_u8PIN7)
    189e:	8b 81       	ldd	r24, Y+3	; 0x03
    18a0:	88 30       	cpi	r24, 0x08	; 8
    18a2:	08 f0       	brcs	.+2      	; 0x18a6 <DIO_u8SetPinValue+0x24>
    18a4:	f4 c0       	rjmp	.+488    	; 0x1a8e <DIO_u8SetPinValue+0x20c>
	{
		if (Copy_u8Value==DIO_u8PIN_HIGH)
    18a6:	8c 81       	ldd	r24, Y+4	; 0x04
    18a8:	81 30       	cpi	r24, 0x01	; 1
    18aa:	09 f0       	breq	.+2      	; 0x18ae <DIO_u8SetPinValue+0x2c>
    18ac:	72 c0       	rjmp	.+228    	; 0x1992 <DIO_u8SetPinValue+0x110>
		{
			switch (Copy_u8Port)
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
    18b0:	28 2f       	mov	r18, r24
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	38 87       	std	Y+8, r19	; 0x08
    18b6:	2f 83       	std	Y+7, r18	; 0x07
    18b8:	8f 81       	ldd	r24, Y+7	; 0x07
    18ba:	98 85       	ldd	r25, Y+8	; 0x08
    18bc:	81 30       	cpi	r24, 0x01	; 1
    18be:	91 05       	cpc	r25, r1
    18c0:	49 f1       	breq	.+82     	; 0x1914 <DIO_u8SetPinValue+0x92>
    18c2:	2f 81       	ldd	r18, Y+7	; 0x07
    18c4:	38 85       	ldd	r19, Y+8	; 0x08
    18c6:	22 30       	cpi	r18, 0x02	; 2
    18c8:	31 05       	cpc	r19, r1
    18ca:	2c f4       	brge	.+10     	; 0x18d6 <DIO_u8SetPinValue+0x54>
    18cc:	8f 81       	ldd	r24, Y+7	; 0x07
    18ce:	98 85       	ldd	r25, Y+8	; 0x08
    18d0:	00 97       	sbiw	r24, 0x00	; 0
    18d2:	61 f0       	breq	.+24     	; 0x18ec <DIO_u8SetPinValue+0x6a>
    18d4:	5b c0       	rjmp	.+182    	; 0x198c <DIO_u8SetPinValue+0x10a>
    18d6:	2f 81       	ldd	r18, Y+7	; 0x07
    18d8:	38 85       	ldd	r19, Y+8	; 0x08
    18da:	22 30       	cpi	r18, 0x02	; 2
    18dc:	31 05       	cpc	r19, r1
    18de:	71 f1       	breq	.+92     	; 0x193c <DIO_u8SetPinValue+0xba>
    18e0:	8f 81       	ldd	r24, Y+7	; 0x07
    18e2:	98 85       	ldd	r25, Y+8	; 0x08
    18e4:	83 30       	cpi	r24, 0x03	; 3
    18e6:	91 05       	cpc	r25, r1
    18e8:	e9 f1       	breq	.+122    	; 0x1964 <DIO_u8SetPinValue+0xe2>
    18ea:	50 c0       	rjmp	.+160    	; 0x198c <DIO_u8SetPinValue+0x10a>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    18ec:	ab e3       	ldi	r26, 0x3B	; 59
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	eb e3       	ldi	r30, 0x3B	; 59
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	48 2f       	mov	r20, r24
    18f8:	8b 81       	ldd	r24, Y+3	; 0x03
    18fa:	28 2f       	mov	r18, r24
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	02 2e       	mov	r0, r18
    1904:	02 c0       	rjmp	.+4      	; 0x190a <DIO_u8SetPinValue+0x88>
    1906:	88 0f       	add	r24, r24
    1908:	99 1f       	adc	r25, r25
    190a:	0a 94       	dec	r0
    190c:	e2 f7       	brpl	.-8      	; 0x1906 <DIO_u8SetPinValue+0x84>
    190e:	84 2b       	or	r24, r20
    1910:	8c 93       	st	X, r24
    1912:	bf c0       	rjmp	.+382    	; 0x1a92 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    1914:	a8 e3       	ldi	r26, 0x38	; 56
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	e8 e3       	ldi	r30, 0x38	; 56
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	48 2f       	mov	r20, r24
    1920:	8b 81       	ldd	r24, Y+3	; 0x03
    1922:	28 2f       	mov	r18, r24
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	02 2e       	mov	r0, r18
    192c:	02 c0       	rjmp	.+4      	; 0x1932 <DIO_u8SetPinValue+0xb0>
    192e:	88 0f       	add	r24, r24
    1930:	99 1f       	adc	r25, r25
    1932:	0a 94       	dec	r0
    1934:	e2 f7       	brpl	.-8      	; 0x192e <DIO_u8SetPinValue+0xac>
    1936:	84 2b       	or	r24, r20
    1938:	8c 93       	st	X, r24
    193a:	ab c0       	rjmp	.+342    	; 0x1a92 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    193c:	a5 e3       	ldi	r26, 0x35	; 53
    193e:	b0 e0       	ldi	r27, 0x00	; 0
    1940:	e5 e3       	ldi	r30, 0x35	; 53
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	48 2f       	mov	r20, r24
    1948:	8b 81       	ldd	r24, Y+3	; 0x03
    194a:	28 2f       	mov	r18, r24
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	02 2e       	mov	r0, r18
    1954:	02 c0       	rjmp	.+4      	; 0x195a <DIO_u8SetPinValue+0xd8>
    1956:	88 0f       	add	r24, r24
    1958:	99 1f       	adc	r25, r25
    195a:	0a 94       	dec	r0
    195c:	e2 f7       	brpl	.-8      	; 0x1956 <DIO_u8SetPinValue+0xd4>
    195e:	84 2b       	or	r24, r20
    1960:	8c 93       	st	X, r24
    1962:	97 c0       	rjmp	.+302    	; 0x1a92 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    1964:	a2 e3       	ldi	r26, 0x32	; 50
    1966:	b0 e0       	ldi	r27, 0x00	; 0
    1968:	e2 e3       	ldi	r30, 0x32	; 50
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	48 2f       	mov	r20, r24
    1970:	8b 81       	ldd	r24, Y+3	; 0x03
    1972:	28 2f       	mov	r18, r24
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	02 2e       	mov	r0, r18
    197c:	02 c0       	rjmp	.+4      	; 0x1982 <DIO_u8SetPinValue+0x100>
    197e:	88 0f       	add	r24, r24
    1980:	99 1f       	adc	r25, r25
    1982:	0a 94       	dec	r0
    1984:	e2 f7       	brpl	.-8      	; 0x197e <DIO_u8SetPinValue+0xfc>
    1986:	84 2b       	or	r24, r20
    1988:	8c 93       	st	X, r24
    198a:	83 c0       	rjmp	.+262    	; 0x1a92 <DIO_u8SetPinValue+0x210>
			default : Local_u8ErrorState=NOK;
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	89 83       	std	Y+1, r24	; 0x01
    1990:	80 c0       	rjmp	.+256    	; 0x1a92 <DIO_u8SetPinValue+0x210>
			}
		}
		else if (Copy_u8Value==DIO_u8PIN_LOW)
    1992:	8c 81       	ldd	r24, Y+4	; 0x04
    1994:	88 23       	and	r24, r24
    1996:	09 f0       	breq	.+2      	; 0x199a <DIO_u8SetPinValue+0x118>
    1998:	77 c0       	rjmp	.+238    	; 0x1a88 <DIO_u8SetPinValue+0x206>
		{
			switch (Copy_u8Port)
    199a:	8a 81       	ldd	r24, Y+2	; 0x02
    199c:	28 2f       	mov	r18, r24
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	3e 83       	std	Y+6, r19	; 0x06
    19a2:	2d 83       	std	Y+5, r18	; 0x05
    19a4:	8d 81       	ldd	r24, Y+5	; 0x05
    19a6:	9e 81       	ldd	r25, Y+6	; 0x06
    19a8:	81 30       	cpi	r24, 0x01	; 1
    19aa:	91 05       	cpc	r25, r1
    19ac:	59 f1       	breq	.+86     	; 0x1a04 <DIO_u8SetPinValue+0x182>
    19ae:	2d 81       	ldd	r18, Y+5	; 0x05
    19b0:	3e 81       	ldd	r19, Y+6	; 0x06
    19b2:	22 30       	cpi	r18, 0x02	; 2
    19b4:	31 05       	cpc	r19, r1
    19b6:	2c f4       	brge	.+10     	; 0x19c2 <DIO_u8SetPinValue+0x140>
    19b8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ba:	9e 81       	ldd	r25, Y+6	; 0x06
    19bc:	00 97       	sbiw	r24, 0x00	; 0
    19be:	69 f0       	breq	.+26     	; 0x19da <DIO_u8SetPinValue+0x158>
    19c0:	60 c0       	rjmp	.+192    	; 0x1a82 <DIO_u8SetPinValue+0x200>
    19c2:	2d 81       	ldd	r18, Y+5	; 0x05
    19c4:	3e 81       	ldd	r19, Y+6	; 0x06
    19c6:	22 30       	cpi	r18, 0x02	; 2
    19c8:	31 05       	cpc	r19, r1
    19ca:	89 f1       	breq	.+98     	; 0x1a2e <DIO_u8SetPinValue+0x1ac>
    19cc:	8d 81       	ldd	r24, Y+5	; 0x05
    19ce:	9e 81       	ldd	r25, Y+6	; 0x06
    19d0:	83 30       	cpi	r24, 0x03	; 3
    19d2:	91 05       	cpc	r25, r1
    19d4:	09 f4       	brne	.+2      	; 0x19d8 <DIO_u8SetPinValue+0x156>
    19d6:	40 c0       	rjmp	.+128    	; 0x1a58 <DIO_u8SetPinValue+0x1d6>
    19d8:	54 c0       	rjmp	.+168    	; 0x1a82 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
    19da:	ab e3       	ldi	r26, 0x3B	; 59
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	eb e3       	ldi	r30, 0x3B	; 59
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	48 2f       	mov	r20, r24
    19e6:	8b 81       	ldd	r24, Y+3	; 0x03
    19e8:	28 2f       	mov	r18, r24
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	02 2e       	mov	r0, r18
    19f2:	02 c0       	rjmp	.+4      	; 0x19f8 <DIO_u8SetPinValue+0x176>
    19f4:	88 0f       	add	r24, r24
    19f6:	99 1f       	adc	r25, r25
    19f8:	0a 94       	dec	r0
    19fa:	e2 f7       	brpl	.-8      	; 0x19f4 <DIO_u8SetPinValue+0x172>
    19fc:	80 95       	com	r24
    19fe:	84 23       	and	r24, r20
    1a00:	8c 93       	st	X, r24
    1a02:	47 c0       	rjmp	.+142    	; 0x1a92 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
    1a04:	a8 e3       	ldi	r26, 0x38	; 56
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	e8 e3       	ldi	r30, 0x38	; 56
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 81       	ld	r24, Z
    1a0e:	48 2f       	mov	r20, r24
    1a10:	8b 81       	ldd	r24, Y+3	; 0x03
    1a12:	28 2f       	mov	r18, r24
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	02 2e       	mov	r0, r18
    1a1c:	02 c0       	rjmp	.+4      	; 0x1a22 <DIO_u8SetPinValue+0x1a0>
    1a1e:	88 0f       	add	r24, r24
    1a20:	99 1f       	adc	r25, r25
    1a22:	0a 94       	dec	r0
    1a24:	e2 f7       	brpl	.-8      	; 0x1a1e <DIO_u8SetPinValue+0x19c>
    1a26:	80 95       	com	r24
    1a28:	84 23       	and	r24, r20
    1a2a:	8c 93       	st	X, r24
    1a2c:	32 c0       	rjmp	.+100    	; 0x1a92 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
    1a2e:	a5 e3       	ldi	r26, 0x35	; 53
    1a30:	b0 e0       	ldi	r27, 0x00	; 0
    1a32:	e5 e3       	ldi	r30, 0x35	; 53
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z
    1a38:	48 2f       	mov	r20, r24
    1a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3c:	28 2f       	mov	r18, r24
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	02 2e       	mov	r0, r18
    1a46:	02 c0       	rjmp	.+4      	; 0x1a4c <DIO_u8SetPinValue+0x1ca>
    1a48:	88 0f       	add	r24, r24
    1a4a:	99 1f       	adc	r25, r25
    1a4c:	0a 94       	dec	r0
    1a4e:	e2 f7       	brpl	.-8      	; 0x1a48 <DIO_u8SetPinValue+0x1c6>
    1a50:	80 95       	com	r24
    1a52:	84 23       	and	r24, r20
    1a54:	8c 93       	st	X, r24
    1a56:	1d c0       	rjmp	.+58     	; 0x1a92 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    1a58:	a2 e3       	ldi	r26, 0x32	; 50
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e2 e3       	ldi	r30, 0x32	; 50
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	48 2f       	mov	r20, r24
    1a64:	8b 81       	ldd	r24, Y+3	; 0x03
    1a66:	28 2f       	mov	r18, r24
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	02 2e       	mov	r0, r18
    1a70:	02 c0       	rjmp	.+4      	; 0x1a76 <DIO_u8SetPinValue+0x1f4>
    1a72:	88 0f       	add	r24, r24
    1a74:	99 1f       	adc	r25, r25
    1a76:	0a 94       	dec	r0
    1a78:	e2 f7       	brpl	.-8      	; 0x1a72 <DIO_u8SetPinValue+0x1f0>
    1a7a:	80 95       	com	r24
    1a7c:	84 23       	and	r24, r20
    1a7e:	8c 93       	st	X, r24
    1a80:	08 c0       	rjmp	.+16     	; 0x1a92 <DIO_u8SetPinValue+0x210>
			default : Local_u8ErrorState=NOK;
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	89 83       	std	Y+1, r24	; 0x01
    1a86:	05 c0       	rjmp	.+10     	; 0x1a92 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=NOK;
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	89 83       	std	Y+1, r24	; 0x01
    1a8c:	02 c0       	rjmp	.+4      	; 0x1a92 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=NOK;
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    1a92:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a94:	28 96       	adiw	r28, 0x08	; 8
    1a96:	0f b6       	in	r0, 0x3f	; 63
    1a98:	f8 94       	cli
    1a9a:	de bf       	out	0x3e, r29	; 62
    1a9c:	0f be       	out	0x3f, r0	; 63
    1a9e:	cd bf       	out	0x3d, r28	; 61
    1aa0:	cf 91       	pop	r28
    1aa2:	df 91       	pop	r29
    1aa4:	08 95       	ret

00001aa6 <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue     (u8 Copy_u8Port, u8 Copy_u8Value)
{
    1aa6:	df 93       	push	r29
    1aa8:	cf 93       	push	r28
    1aaa:	00 d0       	rcall	.+0      	; 0x1aac <DIO_u8SetPortValue+0x6>
    1aac:	00 d0       	rcall	.+0      	; 0x1aae <DIO_u8SetPortValue+0x8>
    1aae:	0f 92       	push	r0
    1ab0:	cd b7       	in	r28, 0x3d	; 61
    1ab2:	de b7       	in	r29, 0x3e	; 62
    1ab4:	8a 83       	std	Y+2, r24	; 0x02
    1ab6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
    1ab8:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8Port)
    1aba:	8a 81       	ldd	r24, Y+2	; 0x02
    1abc:	28 2f       	mov	r18, r24
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	3d 83       	std	Y+5, r19	; 0x05
    1ac2:	2c 83       	std	Y+4, r18	; 0x04
    1ac4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ac8:	81 30       	cpi	r24, 0x01	; 1
    1aca:	91 05       	cpc	r25, r1
    1acc:	d1 f0       	breq	.+52     	; 0x1b02 <DIO_u8SetPortValue+0x5c>
    1ace:	2c 81       	ldd	r18, Y+4	; 0x04
    1ad0:	3d 81       	ldd	r19, Y+5	; 0x05
    1ad2:	22 30       	cpi	r18, 0x02	; 2
    1ad4:	31 05       	cpc	r19, r1
    1ad6:	2c f4       	brge	.+10     	; 0x1ae2 <DIO_u8SetPortValue+0x3c>
    1ad8:	8c 81       	ldd	r24, Y+4	; 0x04
    1ada:	9d 81       	ldd	r25, Y+5	; 0x05
    1adc:	00 97       	sbiw	r24, 0x00	; 0
    1ade:	61 f0       	breq	.+24     	; 0x1af8 <DIO_u8SetPortValue+0x52>
    1ae0:	1f c0       	rjmp	.+62     	; 0x1b20 <DIO_u8SetPortValue+0x7a>
    1ae2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ae4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ae6:	22 30       	cpi	r18, 0x02	; 2
    1ae8:	31 05       	cpc	r19, r1
    1aea:	81 f0       	breq	.+32     	; 0x1b0c <DIO_u8SetPortValue+0x66>
    1aec:	8c 81       	ldd	r24, Y+4	; 0x04
    1aee:	9d 81       	ldd	r25, Y+5	; 0x05
    1af0:	83 30       	cpi	r24, 0x03	; 3
    1af2:	91 05       	cpc	r25, r1
    1af4:	81 f0       	breq	.+32     	; 0x1b16 <DIO_u8SetPortValue+0x70>
    1af6:	14 c0       	rjmp	.+40     	; 0x1b20 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA=Copy_u8Value; break;
    1af8:	eb e3       	ldi	r30, 0x3B	; 59
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	8b 81       	ldd	r24, Y+3	; 0x03
    1afe:	80 83       	st	Z, r24
    1b00:	11 c0       	rjmp	.+34     	; 0x1b24 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB=Copy_u8Value; break;
    1b02:	e8 e3       	ldi	r30, 0x38	; 56
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	8b 81       	ldd	r24, Y+3	; 0x03
    1b08:	80 83       	st	Z, r24
    1b0a:	0c c0       	rjmp	.+24     	; 0x1b24 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC=Copy_u8Value; break;
    1b0c:	e5 e3       	ldi	r30, 0x35	; 53
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	80 83       	st	Z, r24
    1b14:	07 c0       	rjmp	.+14     	; 0x1b24 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD=Copy_u8Value; break;
    1b16:	e2 e3       	ldi	r30, 0x32	; 50
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1c:	80 83       	st	Z, r24
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <DIO_u8SetPortValue+0x7e>
	default : Local_u8ErrorState=NOK;
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
    1b24:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b26:	0f 90       	pop	r0
    1b28:	0f 90       	pop	r0
    1b2a:	0f 90       	pop	r0
    1b2c:	0f 90       	pop	r0
    1b2e:	0f 90       	pop	r0
    1b30:	cf 91       	pop	r28
    1b32:	df 91       	pop	r29
    1b34:	08 95       	ret

00001b36 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue      (u8 Copy_u8Port, u8 Copy_u8Pin , u8 *Copy_pu8Value)
{
    1b36:	df 93       	push	r29
    1b38:	cf 93       	push	r28
    1b3a:	cd b7       	in	r28, 0x3d	; 61
    1b3c:	de b7       	in	r29, 0x3e	; 62
    1b3e:	27 97       	sbiw	r28, 0x07	; 7
    1b40:	0f b6       	in	r0, 0x3f	; 63
    1b42:	f8 94       	cli
    1b44:	de bf       	out	0x3e, r29	; 62
    1b46:	0f be       	out	0x3f, r0	; 63
    1b48:	cd bf       	out	0x3d, r28	; 61
    1b4a:	8a 83       	std	Y+2, r24	; 0x02
    1b4c:	6b 83       	std	Y+3, r22	; 0x03
    1b4e:	5d 83       	std	Y+5, r21	; 0x05
    1b50:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=OK;
    1b52:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_pu8Value != NULL) && (Copy_u8Pin<=DIO_u8PIN7))
    1b54:	8c 81       	ldd	r24, Y+4	; 0x04
    1b56:	9d 81       	ldd	r25, Y+5	; 0x05
    1b58:	00 97       	sbiw	r24, 0x00	; 0
    1b5a:	09 f4       	brne	.+2      	; 0x1b5e <DIO_u8GetPinValue+0x28>
    1b5c:	77 c0       	rjmp	.+238    	; 0x1c4c <DIO_u8GetPinValue+0x116>
    1b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b60:	88 30       	cpi	r24, 0x08	; 8
    1b62:	08 f0       	brcs	.+2      	; 0x1b66 <DIO_u8GetPinValue+0x30>
    1b64:	73 c0       	rjmp	.+230    	; 0x1c4c <DIO_u8GetPinValue+0x116>
	{
		switch (Copy_u8Port)
    1b66:	8a 81       	ldd	r24, Y+2	; 0x02
    1b68:	28 2f       	mov	r18, r24
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	3f 83       	std	Y+7, r19	; 0x07
    1b6e:	2e 83       	std	Y+6, r18	; 0x06
    1b70:	4e 81       	ldd	r20, Y+6	; 0x06
    1b72:	5f 81       	ldd	r21, Y+7	; 0x07
    1b74:	41 30       	cpi	r20, 0x01	; 1
    1b76:	51 05       	cpc	r21, r1
    1b78:	59 f1       	breq	.+86     	; 0x1bd0 <DIO_u8GetPinValue+0x9a>
    1b7a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b7c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b7e:	82 30       	cpi	r24, 0x02	; 2
    1b80:	91 05       	cpc	r25, r1
    1b82:	34 f4       	brge	.+12     	; 0x1b90 <DIO_u8GetPinValue+0x5a>
    1b84:	2e 81       	ldd	r18, Y+6	; 0x06
    1b86:	3f 81       	ldd	r19, Y+7	; 0x07
    1b88:	21 15       	cp	r18, r1
    1b8a:	31 05       	cpc	r19, r1
    1b8c:	69 f0       	breq	.+26     	; 0x1ba8 <DIO_u8GetPinValue+0x72>
    1b8e:	5c c0       	rjmp	.+184    	; 0x1c48 <DIO_u8GetPinValue+0x112>
    1b90:	4e 81       	ldd	r20, Y+6	; 0x06
    1b92:	5f 81       	ldd	r21, Y+7	; 0x07
    1b94:	42 30       	cpi	r20, 0x02	; 2
    1b96:	51 05       	cpc	r21, r1
    1b98:	79 f1       	breq	.+94     	; 0x1bf8 <DIO_u8GetPinValue+0xc2>
    1b9a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b9c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b9e:	83 30       	cpi	r24, 0x03	; 3
    1ba0:	91 05       	cpc	r25, r1
    1ba2:	09 f4       	brne	.+2      	; 0x1ba6 <DIO_u8GetPinValue+0x70>
    1ba4:	3d c0       	rjmp	.+122    	; 0x1c20 <DIO_u8GetPinValue+0xea>
    1ba6:	50 c0       	rjmp	.+160    	; 0x1c48 <DIO_u8GetPinValue+0x112>
		{
		case DIO_u8PORTA: *Copy_pu8Value = GET_BIT(PINA,Copy_u8Pin); break;
    1ba8:	e9 e3       	ldi	r30, 0x39	; 57
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	28 2f       	mov	r18, r24
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb4:	88 2f       	mov	r24, r24
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	a9 01       	movw	r20, r18
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <DIO_u8GetPinValue+0x8a>
    1bbc:	55 95       	asr	r21
    1bbe:	47 95       	ror	r20
    1bc0:	8a 95       	dec	r24
    1bc2:	e2 f7       	brpl	.-8      	; 0x1bbc <DIO_u8GetPinValue+0x86>
    1bc4:	ca 01       	movw	r24, r20
    1bc6:	81 70       	andi	r24, 0x01	; 1
    1bc8:	ec 81       	ldd	r30, Y+4	; 0x04
    1bca:	fd 81       	ldd	r31, Y+5	; 0x05
    1bcc:	80 83       	st	Z, r24
    1bce:	3e c0       	rjmp	.+124    	; 0x1c4c <DIO_u8GetPinValue+0x116>
		case DIO_u8PORTB: *Copy_pu8Value = GET_BIT(PINB,Copy_u8Pin); break;
    1bd0:	e6 e3       	ldi	r30, 0x36	; 54
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	28 2f       	mov	r18, r24
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	8b 81       	ldd	r24, Y+3	; 0x03
    1bdc:	88 2f       	mov	r24, r24
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	a9 01       	movw	r20, r18
    1be2:	02 c0       	rjmp	.+4      	; 0x1be8 <DIO_u8GetPinValue+0xb2>
    1be4:	55 95       	asr	r21
    1be6:	47 95       	ror	r20
    1be8:	8a 95       	dec	r24
    1bea:	e2 f7       	brpl	.-8      	; 0x1be4 <DIO_u8GetPinValue+0xae>
    1bec:	ca 01       	movw	r24, r20
    1bee:	81 70       	andi	r24, 0x01	; 1
    1bf0:	ec 81       	ldd	r30, Y+4	; 0x04
    1bf2:	fd 81       	ldd	r31, Y+5	; 0x05
    1bf4:	80 83       	st	Z, r24
    1bf6:	2a c0       	rjmp	.+84     	; 0x1c4c <DIO_u8GetPinValue+0x116>
		case DIO_u8PORTC: *Copy_pu8Value = GET_BIT(PINC,Copy_u8Pin); break;
    1bf8:	e3 e3       	ldi	r30, 0x33	; 51
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	28 2f       	mov	r18, r24
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	8b 81       	ldd	r24, Y+3	; 0x03
    1c04:	88 2f       	mov	r24, r24
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	a9 01       	movw	r20, r18
    1c0a:	02 c0       	rjmp	.+4      	; 0x1c10 <DIO_u8GetPinValue+0xda>
    1c0c:	55 95       	asr	r21
    1c0e:	47 95       	ror	r20
    1c10:	8a 95       	dec	r24
    1c12:	e2 f7       	brpl	.-8      	; 0x1c0c <DIO_u8GetPinValue+0xd6>
    1c14:	ca 01       	movw	r24, r20
    1c16:	81 70       	andi	r24, 0x01	; 1
    1c18:	ec 81       	ldd	r30, Y+4	; 0x04
    1c1a:	fd 81       	ldd	r31, Y+5	; 0x05
    1c1c:	80 83       	st	Z, r24
    1c1e:	16 c0       	rjmp	.+44     	; 0x1c4c <DIO_u8GetPinValue+0x116>
		case DIO_u8PORTD: *Copy_pu8Value = GET_BIT(PIND,Copy_u8Pin); break;
    1c20:	e0 e3       	ldi	r30, 0x30	; 48
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	80 81       	ld	r24, Z
    1c26:	28 2f       	mov	r18, r24
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2c:	88 2f       	mov	r24, r24
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	a9 01       	movw	r20, r18
    1c32:	02 c0       	rjmp	.+4      	; 0x1c38 <DIO_u8GetPinValue+0x102>
    1c34:	55 95       	asr	r21
    1c36:	47 95       	ror	r20
    1c38:	8a 95       	dec	r24
    1c3a:	e2 f7       	brpl	.-8      	; 0x1c34 <DIO_u8GetPinValue+0xfe>
    1c3c:	ca 01       	movw	r24, r20
    1c3e:	81 70       	andi	r24, 0x01	; 1
    1c40:	ec 81       	ldd	r30, Y+4	; 0x04
    1c42:	fd 81       	ldd	r31, Y+5	; 0x05
    1c44:	80 83       	st	Z, r24
    1c46:	02 c0       	rjmp	.+4      	; 0x1c4c <DIO_u8GetPinValue+0x116>
		default : Local_u8ErrorState=NOK;
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Local_u8ErrorState ;
    1c4c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c4e:	27 96       	adiw	r28, 0x07	; 7
    1c50:	0f b6       	in	r0, 0x3f	; 63
    1c52:	f8 94       	cli
    1c54:	de bf       	out	0x3e, r29	; 62
    1c56:	0f be       	out	0x3f, r0	; 63
    1c58:	cd bf       	out	0x3d, r28	; 61
    1c5a:	cf 91       	pop	r28
    1c5c:	df 91       	pop	r29
    1c5e:	08 95       	ret

00001c60 <CLCD_voidSendCommand>:
#include"CLCD_config.h"



void CLCD_voidSendCommand (u8 Copy_u8Command)
{
    1c60:	df 93       	push	r29
    1c62:	cf 93       	push	r28
    1c64:	cd b7       	in	r28, 0x3d	; 61
    1c66:	de b7       	in	r29, 0x3e	; 62
    1c68:	2f 97       	sbiw	r28, 0x0f	; 15
    1c6a:	0f b6       	in	r0, 0x3f	; 63
    1c6c:	f8 94       	cli
    1c6e:	de bf       	out	0x3e, r29	; 62
    1c70:	0f be       	out	0x3f, r0	; 63
    1c72:	cd bf       	out	0x3d, r28	; 61
    1c74:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	65 e0       	ldi	r22, 0x05	; 5
    1c7a:	40 e0       	ldi	r20, 0x00	; 0
    1c7c:	0e 94 41 0c 	call	0x1882	; 0x1882 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	66 e0       	ldi	r22, 0x06	; 6
    1c84:	40 e0       	ldi	r20, 0x00	; 0
    1c86:	0e 94 41 0c 	call	0x1882	; 0x1882 <DIO_u8SetPinValue>
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
    1c8c:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c8e:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <DIO_u8SetPortValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	67 e0       	ldi	r22, 0x07	; 7
    1c96:	41 e0       	ldi	r20, 0x01	; 1
    1c98:	0e 94 41 0c 	call	0x1882	; 0x1882 <DIO_u8SetPinValue>
    1c9c:	80 e0       	ldi	r24, 0x00	; 0
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	a0 e0       	ldi	r26, 0x00	; 0
    1ca2:	b0 e4       	ldi	r27, 0x40	; 64
    1ca4:	8b 87       	std	Y+11, r24	; 0x0b
    1ca6:	9c 87       	std	Y+12, r25	; 0x0c
    1ca8:	ad 87       	std	Y+13, r26	; 0x0d
    1caa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cac:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cae:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	4a ef       	ldi	r20, 0xFA	; 250
    1cba:	54 e4       	ldi	r21, 0x44	; 68
    1cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc0:	dc 01       	movw	r26, r24
    1cc2:	cb 01       	movw	r24, r22
    1cc4:	8f 83       	std	Y+7, r24	; 0x07
    1cc6:	98 87       	std	Y+8, r25	; 0x08
    1cc8:	a9 87       	std	Y+9, r26	; 0x09
    1cca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ccc:	6f 81       	ldd	r22, Y+7	; 0x07
    1cce:	78 85       	ldd	r23, Y+8	; 0x08
    1cd0:	89 85       	ldd	r24, Y+9	; 0x09
    1cd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	40 e8       	ldi	r20, 0x80	; 128
    1cda:	5f e3       	ldi	r21, 0x3F	; 63
    1cdc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ce0:	88 23       	and	r24, r24
    1ce2:	2c f4       	brge	.+10     	; 0x1cee <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	9e 83       	std	Y+6, r25	; 0x06
    1cea:	8d 83       	std	Y+5, r24	; 0x05
    1cec:	3f c0       	rjmp	.+126    	; 0x1d6c <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    1cee:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf0:	78 85       	ldd	r23, Y+8	; 0x08
    1cf2:	89 85       	ldd	r24, Y+9	; 0x09
    1cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	3f ef       	ldi	r19, 0xFF	; 255
    1cfa:	4f e7       	ldi	r20, 0x7F	; 127
    1cfc:	57 e4       	ldi	r21, 0x47	; 71
    1cfe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d02:	18 16       	cp	r1, r24
    1d04:	4c f5       	brge	.+82     	; 0x1d58 <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d06:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d08:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	40 e2       	ldi	r20, 0x20	; 32
    1d14:	51 e4       	ldi	r21, 0x41	; 65
    1d16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	bc 01       	movw	r22, r24
    1d20:	cd 01       	movw	r24, r26
    1d22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d26:	dc 01       	movw	r26, r24
    1d28:	cb 01       	movw	r24, r22
    1d2a:	9e 83       	std	Y+6, r25	; 0x06
    1d2c:	8d 83       	std	Y+5, r24	; 0x05
    1d2e:	0f c0       	rjmp	.+30     	; 0x1d4e <CLCD_voidSendCommand+0xee>
    1d30:	88 ec       	ldi	r24, 0xC8	; 200
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	9c 83       	std	Y+4, r25	; 0x04
    1d36:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d38:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d3c:	01 97       	sbiw	r24, 0x01	; 1
    1d3e:	f1 f7       	brne	.-4      	; 0x1d3c <CLCD_voidSendCommand+0xdc>
    1d40:	9c 83       	std	Y+4, r25	; 0x04
    1d42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d44:	8d 81       	ldd	r24, Y+5	; 0x05
    1d46:	9e 81       	ldd	r25, Y+6	; 0x06
    1d48:	01 97       	sbiw	r24, 0x01	; 1
    1d4a:	9e 83       	std	Y+6, r25	; 0x06
    1d4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d50:	9e 81       	ldd	r25, Y+6	; 0x06
    1d52:	00 97       	sbiw	r24, 0x00	; 0
    1d54:	69 f7       	brne	.-38     	; 0x1d30 <CLCD_voidSendCommand+0xd0>
    1d56:	14 c0       	rjmp	.+40     	; 0x1d80 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d58:	6f 81       	ldd	r22, Y+7	; 0x07
    1d5a:	78 85       	ldd	r23, Y+8	; 0x08
    1d5c:	89 85       	ldd	r24, Y+9	; 0x09
    1d5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d64:	dc 01       	movw	r26, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	9e 83       	std	Y+6, r25	; 0x06
    1d6a:	8d 83       	std	Y+5, r24	; 0x05
    1d6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d70:	9a 83       	std	Y+2, r25	; 0x02
    1d72:	89 83       	std	Y+1, r24	; 0x01
    1d74:	89 81       	ldd	r24, Y+1	; 0x01
    1d76:	9a 81       	ldd	r25, Y+2	; 0x02
    1d78:	01 97       	sbiw	r24, 0x01	; 1
    1d7a:	f1 f7       	brne	.-4      	; 0x1d78 <CLCD_voidSendCommand+0x118>
    1d7c:	9a 83       	std	Y+2, r25	; 0x02
    1d7e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	67 e0       	ldi	r22, 0x07	; 7
    1d84:	40 e0       	ldi	r20, 0x00	; 0
    1d86:	0e 94 41 0c 	call	0x1882	; 0x1882 <DIO_u8SetPinValue>
}
    1d8a:	2f 96       	adiw	r28, 0x0f	; 15
    1d8c:	0f b6       	in	r0, 0x3f	; 63
    1d8e:	f8 94       	cli
    1d90:	de bf       	out	0x3e, r29	; 62
    1d92:	0f be       	out	0x3f, r0	; 63
    1d94:	cd bf       	out	0x3d, r28	; 61
    1d96:	cf 91       	pop	r28
    1d98:	df 91       	pop	r29
    1d9a:	08 95       	ret

00001d9c <CLCD_voidSendData>:
void CLCD_voidSendData (u8 Copy_u8Data)
{
    1d9c:	df 93       	push	r29
    1d9e:	cf 93       	push	r28
    1da0:	cd b7       	in	r28, 0x3d	; 61
    1da2:	de b7       	in	r29, 0x3e	; 62
    1da4:	2f 97       	sbiw	r28, 0x0f	; 15
    1da6:	0f b6       	in	r0, 0x3f	; 63
    1da8:	f8 94       	cli
    1daa:	de bf       	out	0x3e, r29	; 62
    1dac:	0f be       	out	0x3f, r0	; 63
    1dae:	cd bf       	out	0x3d, r28	; 61
    1db0:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	65 e0       	ldi	r22, 0x05	; 5
    1db6:	41 e0       	ldi	r20, 0x01	; 1
    1db8:	0e 94 41 0c 	call	0x1882	; 0x1882 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	66 e0       	ldi	r22, 0x06	; 6
    1dc0:	40 e0       	ldi	r20, 0x00	; 0
    1dc2:	0e 94 41 0c 	call	0x1882	; 0x1882 <DIO_u8SetPinValue>
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
    1dc8:	6f 85       	ldd	r22, Y+15	; 0x0f
    1dca:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <DIO_u8SetPortValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	67 e0       	ldi	r22, 0x07	; 7
    1dd2:	41 e0       	ldi	r20, 0x01	; 1
    1dd4:	0e 94 41 0c 	call	0x1882	; 0x1882 <DIO_u8SetPinValue>
    1dd8:	80 e0       	ldi	r24, 0x00	; 0
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	a0 e0       	ldi	r26, 0x00	; 0
    1dde:	b0 e4       	ldi	r27, 0x40	; 64
    1de0:	8b 87       	std	Y+11, r24	; 0x0b
    1de2:	9c 87       	std	Y+12, r25	; 0x0c
    1de4:	ad 87       	std	Y+13, r26	; 0x0d
    1de6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dea:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	4a ef       	ldi	r20, 0xFA	; 250
    1df6:	54 e4       	ldi	r21, 0x44	; 68
    1df8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	8f 83       	std	Y+7, r24	; 0x07
    1e02:	98 87       	std	Y+8, r25	; 0x08
    1e04:	a9 87       	std	Y+9, r26	; 0x09
    1e06:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e08:	6f 81       	ldd	r22, Y+7	; 0x07
    1e0a:	78 85       	ldd	r23, Y+8	; 0x08
    1e0c:	89 85       	ldd	r24, Y+9	; 0x09
    1e0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	40 e8       	ldi	r20, 0x80	; 128
    1e16:	5f e3       	ldi	r21, 0x3F	; 63
    1e18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e1c:	88 23       	and	r24, r24
    1e1e:	2c f4       	brge	.+10     	; 0x1e2a <CLCD_voidSendData+0x8e>
		__ticks = 1;
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	9e 83       	std	Y+6, r25	; 0x06
    1e26:	8d 83       	std	Y+5, r24	; 0x05
    1e28:	3f c0       	rjmp	.+126    	; 0x1ea8 <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1e2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e2c:	78 85       	ldd	r23, Y+8	; 0x08
    1e2e:	89 85       	ldd	r24, Y+9	; 0x09
    1e30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	3f ef       	ldi	r19, 0xFF	; 255
    1e36:	4f e7       	ldi	r20, 0x7F	; 127
    1e38:	57 e4       	ldi	r21, 0x47	; 71
    1e3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e3e:	18 16       	cp	r1, r24
    1e40:	4c f5       	brge	.+82     	; 0x1e94 <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e42:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e44:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e46:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e48:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e4a:	20 e0       	ldi	r18, 0x00	; 0
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	40 e2       	ldi	r20, 0x20	; 32
    1e50:	51 e4       	ldi	r21, 0x41	; 65
    1e52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	bc 01       	movw	r22, r24
    1e5c:	cd 01       	movw	r24, r26
    1e5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e62:	dc 01       	movw	r26, r24
    1e64:	cb 01       	movw	r24, r22
    1e66:	9e 83       	std	Y+6, r25	; 0x06
    1e68:	8d 83       	std	Y+5, r24	; 0x05
    1e6a:	0f c0       	rjmp	.+30     	; 0x1e8a <CLCD_voidSendData+0xee>
    1e6c:	88 ec       	ldi	r24, 0xC8	; 200
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	9c 83       	std	Y+4, r25	; 0x04
    1e72:	8b 83       	std	Y+3, r24	; 0x03
    1e74:	8b 81       	ldd	r24, Y+3	; 0x03
    1e76:	9c 81       	ldd	r25, Y+4	; 0x04
    1e78:	01 97       	sbiw	r24, 0x01	; 1
    1e7a:	f1 f7       	brne	.-4      	; 0x1e78 <CLCD_voidSendData+0xdc>
    1e7c:	9c 83       	std	Y+4, r25	; 0x04
    1e7e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e80:	8d 81       	ldd	r24, Y+5	; 0x05
    1e82:	9e 81       	ldd	r25, Y+6	; 0x06
    1e84:	01 97       	sbiw	r24, 0x01	; 1
    1e86:	9e 83       	std	Y+6, r25	; 0x06
    1e88:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e8e:	00 97       	sbiw	r24, 0x00	; 0
    1e90:	69 f7       	brne	.-38     	; 0x1e6c <CLCD_voidSendData+0xd0>
    1e92:	14 c0       	rjmp	.+40     	; 0x1ebc <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e94:	6f 81       	ldd	r22, Y+7	; 0x07
    1e96:	78 85       	ldd	r23, Y+8	; 0x08
    1e98:	89 85       	ldd	r24, Y+9	; 0x09
    1e9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	9e 83       	std	Y+6, r25	; 0x06
    1ea6:	8d 83       	std	Y+5, r24	; 0x05
    1ea8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eaa:	9e 81       	ldd	r25, Y+6	; 0x06
    1eac:	9a 83       	std	Y+2, r25	; 0x02
    1eae:	89 83       	std	Y+1, r24	; 0x01
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb4:	01 97       	sbiw	r24, 0x01	; 1
    1eb6:	f1 f7       	brne	.-4      	; 0x1eb4 <CLCD_voidSendData+0x118>
    1eb8:	9a 83       	std	Y+2, r25	; 0x02
    1eba:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	67 e0       	ldi	r22, 0x07	; 7
    1ec0:	40 e0       	ldi	r20, 0x00	; 0
    1ec2:	0e 94 41 0c 	call	0x1882	; 0x1882 <DIO_u8SetPinValue>
}
    1ec6:	2f 96       	adiw	r28, 0x0f	; 15
    1ec8:	0f b6       	in	r0, 0x3f	; 63
    1eca:	f8 94       	cli
    1ecc:	de bf       	out	0x3e, r29	; 62
    1ece:	0f be       	out	0x3f, r0	; 63
    1ed0:	cd bf       	out	0x3d, r28	; 61
    1ed2:	cf 91       	pop	r28
    1ed4:	df 91       	pop	r29
    1ed6:	08 95       	ret

00001ed8 <CLCD_voidInit>:
void CLCD_voidInit     (void)
{
    1ed8:	df 93       	push	r29
    1eda:	cf 93       	push	r28
    1edc:	cd b7       	in	r28, 0x3d	; 61
    1ede:	de b7       	in	r29, 0x3e	; 62
    1ee0:	2e 97       	sbiw	r28, 0x0e	; 14
    1ee2:	0f b6       	in	r0, 0x3f	; 63
    1ee4:	f8 94       	cli
    1ee6:	de bf       	out	0x3e, r29	; 62
    1ee8:	0f be       	out	0x3f, r0	; 63
    1eea:	cd bf       	out	0x3d, r28	; 61
    1eec:	80 e0       	ldi	r24, 0x00	; 0
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	a0 e2       	ldi	r26, 0x20	; 32
    1ef2:	b2 e4       	ldi	r27, 0x42	; 66
    1ef4:	8b 87       	std	Y+11, r24	; 0x0b
    1ef6:	9c 87       	std	Y+12, r25	; 0x0c
    1ef8:	ad 87       	std	Y+13, r26	; 0x0d
    1efa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1efc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1efe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	4a ef       	ldi	r20, 0xFA	; 250
    1f0a:	54 e4       	ldi	r21, 0x44	; 68
    1f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	8f 83       	std	Y+7, r24	; 0x07
    1f16:	98 87       	std	Y+8, r25	; 0x08
    1f18:	a9 87       	std	Y+9, r26	; 0x09
    1f1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f1e:	78 85       	ldd	r23, Y+8	; 0x08
    1f20:	89 85       	ldd	r24, Y+9	; 0x09
    1f22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f24:	20 e0       	ldi	r18, 0x00	; 0
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	40 e8       	ldi	r20, 0x80	; 128
    1f2a:	5f e3       	ldi	r21, 0x3F	; 63
    1f2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f30:	88 23       	and	r24, r24
    1f32:	2c f4       	brge	.+10     	; 0x1f3e <CLCD_voidInit+0x66>
		__ticks = 1;
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	9e 83       	std	Y+6, r25	; 0x06
    1f3a:	8d 83       	std	Y+5, r24	; 0x05
    1f3c:	3f c0       	rjmp	.+126    	; 0x1fbc <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1f3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f40:	78 85       	ldd	r23, Y+8	; 0x08
    1f42:	89 85       	ldd	r24, Y+9	; 0x09
    1f44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	3f ef       	ldi	r19, 0xFF	; 255
    1f4a:	4f e7       	ldi	r20, 0x7F	; 127
    1f4c:	57 e4       	ldi	r21, 0x47	; 71
    1f4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f52:	18 16       	cp	r1, r24
    1f54:	4c f5       	brge	.+82     	; 0x1fa8 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f56:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f58:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	40 e2       	ldi	r20, 0x20	; 32
    1f64:	51 e4       	ldi	r21, 0x41	; 65
    1f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	bc 01       	movw	r22, r24
    1f70:	cd 01       	movw	r24, r26
    1f72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	9e 83       	std	Y+6, r25	; 0x06
    1f7c:	8d 83       	std	Y+5, r24	; 0x05
    1f7e:	0f c0       	rjmp	.+30     	; 0x1f9e <CLCD_voidInit+0xc6>
    1f80:	88 ec       	ldi	r24, 0xC8	; 200
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	9c 83       	std	Y+4, r25	; 0x04
    1f86:	8b 83       	std	Y+3, r24	; 0x03
    1f88:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8c:	01 97       	sbiw	r24, 0x01	; 1
    1f8e:	f1 f7       	brne	.-4      	; 0x1f8c <CLCD_voidInit+0xb4>
    1f90:	9c 83       	std	Y+4, r25	; 0x04
    1f92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f94:	8d 81       	ldd	r24, Y+5	; 0x05
    1f96:	9e 81       	ldd	r25, Y+6	; 0x06
    1f98:	01 97       	sbiw	r24, 0x01	; 1
    1f9a:	9e 83       	std	Y+6, r25	; 0x06
    1f9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa2:	00 97       	sbiw	r24, 0x00	; 0
    1fa4:	69 f7       	brne	.-38     	; 0x1f80 <CLCD_voidInit+0xa8>
    1fa6:	14 c0       	rjmp	.+40     	; 0x1fd0 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa8:	6f 81       	ldd	r22, Y+7	; 0x07
    1faa:	78 85       	ldd	r23, Y+8	; 0x08
    1fac:	89 85       	ldd	r24, Y+9	; 0x09
    1fae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb4:	dc 01       	movw	r26, r24
    1fb6:	cb 01       	movw	r24, r22
    1fb8:	9e 83       	std	Y+6, r25	; 0x06
    1fba:	8d 83       	std	Y+5, r24	; 0x05
    1fbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc0:	9a 83       	std	Y+2, r25	; 0x02
    1fc2:	89 83       	std	Y+1, r24	; 0x01
    1fc4:	89 81       	ldd	r24, Y+1	; 0x01
    1fc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc8:	01 97       	sbiw	r24, 0x01	; 1
    1fca:	f1 f7       	brne	.-4      	; 0x1fc8 <CLCD_voidInit+0xf0>
    1fcc:	9a 83       	std	Y+2, r25	; 0x02
    1fce:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(40);

	CLCD_voidSendCommand (0b00111000);
    1fd0:	88 e3       	ldi	r24, 0x38	; 56
    1fd2:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <CLCD_voidSendCommand>
	CLCD_voidSendCommand (0b00001100);
    1fd6:	8c e0       	ldi	r24, 0x0C	; 12
    1fd8:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <CLCD_voidSendCommand>
	CLCD_voidSendCommand (1);
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <CLCD_voidSendCommand>

}
    1fe2:	2e 96       	adiw	r28, 0x0e	; 14
    1fe4:	0f b6       	in	r0, 0x3f	; 63
    1fe6:	f8 94       	cli
    1fe8:	de bf       	out	0x3e, r29	; 62
    1fea:	0f be       	out	0x3f, r0	; 63
    1fec:	cd bf       	out	0x3d, r28	; 61
    1fee:	cf 91       	pop	r28
    1ff0:	df 91       	pop	r29
    1ff2:	08 95       	ret

00001ff4 <CLCD_voidGoToXY>:
void CLCD_voidGoToXY (u8 Copy_u8XPos , u8 Copy_u8YPos)
{
    1ff4:	df 93       	push	r29
    1ff6:	cf 93       	push	r28
    1ff8:	00 d0       	rcall	.+0      	; 0x1ffa <CLCD_voidGoToXY+0x6>
    1ffa:	0f 92       	push	r0
    1ffc:	cd b7       	in	r28, 0x3d	; 61
    1ffe:	de b7       	in	r29, 0x3e	; 62
    2000:	8a 83       	std	Y+2, r24	; 0x02
    2002:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8DDRAMAddress;

	Local_u8DDRAMAddress=0x40*Copy_u8YPos+Copy_u8XPos;
    2004:	8b 81       	ldd	r24, Y+3	; 0x03
    2006:	88 2f       	mov	r24, r24
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	00 24       	eor	r0, r0
    200c:	96 95       	lsr	r25
    200e:	87 95       	ror	r24
    2010:	07 94       	ror	r0
    2012:	96 95       	lsr	r25
    2014:	87 95       	ror	r24
    2016:	07 94       	ror	r0
    2018:	98 2f       	mov	r25, r24
    201a:	80 2d       	mov	r24, r0
    201c:	98 2f       	mov	r25, r24
    201e:	8a 81       	ldd	r24, Y+2	; 0x02
    2020:	89 0f       	add	r24, r25
    2022:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendCommand(Local_u8DDRAMAddress+(1<<7));
    2024:	89 81       	ldd	r24, Y+1	; 0x01
    2026:	80 58       	subi	r24, 0x80	; 128
    2028:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <CLCD_voidSendCommand>

}
    202c:	0f 90       	pop	r0
    202e:	0f 90       	pop	r0
    2030:	0f 90       	pop	r0
    2032:	cf 91       	pop	r28
    2034:	df 91       	pop	r29
    2036:	08 95       	ret

00002038 <CLCD_voidWriteSpecialCharacter>:
void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern,u8 Copy_u8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    2038:	df 93       	push	r29
    203a:	cf 93       	push	r28
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
    2040:	27 97       	sbiw	r28, 0x07	; 7
    2042:	0f b6       	in	r0, 0x3f	; 63
    2044:	f8 94       	cli
    2046:	de bf       	out	0x3e, r29	; 62
    2048:	0f be       	out	0x3f, r0	; 63
    204a:	cd bf       	out	0x3d, r28	; 61
    204c:	9c 83       	std	Y+4, r25	; 0x04
    204e:	8b 83       	std	Y+3, r24	; 0x03
    2050:	6d 83       	std	Y+5, r22	; 0x05
    2052:	4e 83       	std	Y+6, r20	; 0x06
    2054:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress,Local_u8Counter;

	Local_u8CGRAMAddress=Copy_u8PatternNumber *8;
    2056:	8d 81       	ldd	r24, Y+5	; 0x05
    2058:	88 2f       	mov	r24, r24
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	88 0f       	add	r24, r24
    205e:	99 1f       	adc	r25, r25
    2060:	88 0f       	add	r24, r24
    2062:	99 1f       	adc	r25, r25
    2064:	88 0f       	add	r24, r24
    2066:	99 1f       	adc	r25, r25
    2068:	8a 83       	std	Y+2, r24	; 0x02

	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);
    206a:	8a 81       	ldd	r24, Y+2	; 0x02
    206c:	80 5c       	subi	r24, 0xC0	; 192
    206e:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <CLCD_voidSendCommand>

	for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    2072:	19 82       	std	Y+1, r1	; 0x01
    2074:	0e c0       	rjmp	.+28     	; 0x2092 <CLCD_voidWriteSpecialCharacter+0x5a>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);
    2076:	89 81       	ldd	r24, Y+1	; 0x01
    2078:	28 2f       	mov	r18, r24
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	8b 81       	ldd	r24, Y+3	; 0x03
    207e:	9c 81       	ldd	r25, Y+4	; 0x04
    2080:	fc 01       	movw	r30, r24
    2082:	e2 0f       	add	r30, r18
    2084:	f3 1f       	adc	r31, r19
    2086:	80 81       	ld	r24, Z
    2088:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <CLCD_voidSendData>

	Local_u8CGRAMAddress=Copy_u8PatternNumber *8;

	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);

	for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    208c:	89 81       	ldd	r24, Y+1	; 0x01
    208e:	8f 5f       	subi	r24, 0xFF	; 255
    2090:	89 83       	std	Y+1, r24	; 0x01
    2092:	89 81       	ldd	r24, Y+1	; 0x01
    2094:	88 30       	cpi	r24, 0x08	; 8
    2096:	78 f3       	brcs	.-34     	; 0x2076 <CLCD_voidWriteSpecialCharacter+0x3e>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);
	}
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    2098:	8e 81       	ldd	r24, Y+6	; 0x06
    209a:	6f 81       	ldd	r22, Y+7	; 0x07
    209c:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <CLCD_voidGoToXY>
	CLCD_voidSendData(Copy_u8PatternNumber);
    20a0:	8d 81       	ldd	r24, Y+5	; 0x05
    20a2:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <CLCD_voidSendData>

}
    20a6:	27 96       	adiw	r28, 0x07	; 7
    20a8:	0f b6       	in	r0, 0x3f	; 63
    20aa:	f8 94       	cli
    20ac:	de bf       	out	0x3e, r29	; 62
    20ae:	0f be       	out	0x3f, r0	; 63
    20b0:	cd bf       	out	0x3d, r28	; 61
    20b2:	cf 91       	pop	r28
    20b4:	df 91       	pop	r29
    20b6:	08 95       	ret

000020b8 <CLCD_voidWriteString>:




void CLCD_voidWriteString(u8* Local_u8String)
{
    20b8:	df 93       	push	r29
    20ba:	cf 93       	push	r28
    20bc:	00 d0       	rcall	.+0      	; 0x20be <CLCD_voidWriteString+0x6>
    20be:	0f 92       	push	r0
    20c0:	cd b7       	in	r28, 0x3d	; 61
    20c2:	de b7       	in	r29, 0x3e	; 62
    20c4:	9b 83       	std	Y+3, r25	; 0x03
    20c6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Index = 0;
    20c8:	19 82       	std	Y+1, r1	; 0x01
    20ca:	0e c0       	rjmp	.+28     	; 0x20e8 <CLCD_voidWriteString+0x30>
	while(Local_u8String[Local_u8Index] != '\0')
	{
		CLCD_voidSendData(Local_u8String[Local_u8Index]);
    20cc:	89 81       	ldd	r24, Y+1	; 0x01
    20ce:	28 2f       	mov	r18, r24
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	8a 81       	ldd	r24, Y+2	; 0x02
    20d4:	9b 81       	ldd	r25, Y+3	; 0x03
    20d6:	fc 01       	movw	r30, r24
    20d8:	e2 0f       	add	r30, r18
    20da:	f3 1f       	adc	r31, r19
    20dc:	80 81       	ld	r24, Z
    20de:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <CLCD_voidSendData>
		Local_u8Index++;
    20e2:	89 81       	ldd	r24, Y+1	; 0x01
    20e4:	8f 5f       	subi	r24, 0xFF	; 255
    20e6:	89 83       	std	Y+1, r24	; 0x01


void CLCD_voidWriteString(u8* Local_u8String)
{
	u8 Local_u8Index = 0;
	while(Local_u8String[Local_u8Index] != '\0')
    20e8:	89 81       	ldd	r24, Y+1	; 0x01
    20ea:	28 2f       	mov	r18, r24
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	8a 81       	ldd	r24, Y+2	; 0x02
    20f0:	9b 81       	ldd	r25, Y+3	; 0x03
    20f2:	fc 01       	movw	r30, r24
    20f4:	e2 0f       	add	r30, r18
    20f6:	f3 1f       	adc	r31, r19
    20f8:	80 81       	ld	r24, Z
    20fa:	88 23       	and	r24, r24
    20fc:	39 f7       	brne	.-50     	; 0x20cc <CLCD_voidWriteString+0x14>
	{
		CLCD_voidSendData(Local_u8String[Local_u8Index]);
		Local_u8Index++;
	}
}
    20fe:	0f 90       	pop	r0
    2100:	0f 90       	pop	r0
    2102:	0f 90       	pop	r0
    2104:	cf 91       	pop	r28
    2106:	df 91       	pop	r29
    2108:	08 95       	ret

0000210a <ClCD_voidWriteInteger>:

void ClCD_voidWriteInteger(u16 Local_u16Number)
{
    210a:	df 93       	push	r29
    210c:	cf 93       	push	r28
    210e:	cd b7       	in	r28, 0x3d	; 61
    2110:	de b7       	in	r29, 0x3e	; 62
    2112:	67 97       	sbiw	r28, 0x17	; 23
    2114:	0f b6       	in	r0, 0x3f	; 63
    2116:	f8 94       	cli
    2118:	de bf       	out	0x3e, r29	; 62
    211a:	0f be       	out	0x3f, r0	; 63
    211c:	cd bf       	out	0x3d, r28	; 61
    211e:	9f 8b       	std	Y+23, r25	; 0x17
    2120:	8e 8b       	std	Y+22, r24	; 0x16
	u16 Local_u16NumberArr[10]={0};
    2122:	84 e1       	ldi	r24, 0x14	; 20
    2124:	fe 01       	movw	r30, r28
    2126:	32 96       	adiw	r30, 0x02	; 2
    2128:	df 01       	movw	r26, r30
    212a:	98 2f       	mov	r25, r24
    212c:	1d 92       	st	X+, r1
    212e:	9a 95       	dec	r25
    2130:	e9 f7       	brne	.-6      	; 0x212c <ClCD_voidWriteInteger+0x22>
	u8 Local_u8Counter=0;
    2132:	19 82       	std	Y+1, r1	; 0x01
	if(Local_u16Number==0)
    2134:	8e 89       	ldd	r24, Y+22	; 0x16
    2136:	9f 89       	ldd	r25, Y+23	; 0x17
    2138:	00 97       	sbiw	r24, 0x00	; 0
    213a:	49 f5       	brne	.+82     	; 0x218e <ClCD_voidWriteInteger+0x84>
	{
		CLCD_voidSendData('0');
    213c:	80 e3       	ldi	r24, 0x30	; 48
    213e:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <CLCD_voidSendData>
    2142:	41 c0       	rjmp	.+130    	; 0x21c6 <ClCD_voidWriteInteger+0xbc>
		return;
	}
	while(Local_u16Number != 0)
	{
		Local_u16NumberArr[Local_u8Counter]=Local_u16Number%10+'0';
    2144:	89 81       	ldd	r24, Y+1	; 0x01
    2146:	e8 2f       	mov	r30, r24
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	8e 89       	ldd	r24, Y+22	; 0x16
    214c:	9f 89       	ldd	r25, Y+23	; 0x17
    214e:	2a e0       	ldi	r18, 0x0A	; 10
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	b9 01       	movw	r22, r18
    2154:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <__udivmodhi4>
    2158:	ac 01       	movw	r20, r24
    215a:	40 5d       	subi	r20, 0xD0	; 208
    215c:	5f 4f       	sbci	r21, 0xFF	; 255
    215e:	9f 01       	movw	r18, r30
    2160:	22 0f       	add	r18, r18
    2162:	33 1f       	adc	r19, r19
    2164:	ce 01       	movw	r24, r28
    2166:	01 96       	adiw	r24, 0x01	; 1
    2168:	82 0f       	add	r24, r18
    216a:	93 1f       	adc	r25, r19
    216c:	fc 01       	movw	r30, r24
    216e:	31 96       	adiw	r30, 0x01	; 1
    2170:	51 83       	std	Z+1, r21	; 0x01
    2172:	40 83       	st	Z, r20
		Local_u16Number=Local_u16Number/10;
    2174:	8e 89       	ldd	r24, Y+22	; 0x16
    2176:	9f 89       	ldd	r25, Y+23	; 0x17
    2178:	2a e0       	ldi	r18, 0x0A	; 10
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	b9 01       	movw	r22, r18
    217e:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <__udivmodhi4>
    2182:	cb 01       	movw	r24, r22
    2184:	9f 8b       	std	Y+23, r25	; 0x17
    2186:	8e 8b       	std	Y+22, r24	; 0x16
		Local_u8Counter++;
    2188:	89 81       	ldd	r24, Y+1	; 0x01
    218a:	8f 5f       	subi	r24, 0xFF	; 255
    218c:	89 83       	std	Y+1, r24	; 0x01
	if(Local_u16Number==0)
	{
		CLCD_voidSendData('0');
		return;
	}
	while(Local_u16Number != 0)
    218e:	8e 89       	ldd	r24, Y+22	; 0x16
    2190:	9f 89       	ldd	r25, Y+23	; 0x17
    2192:	00 97       	sbiw	r24, 0x00	; 0
    2194:	b9 f6       	brne	.-82     	; 0x2144 <ClCD_voidWriteInteger+0x3a>
    2196:	14 c0       	rjmp	.+40     	; 0x21c0 <ClCD_voidWriteInteger+0xb6>
		Local_u16Number=Local_u16Number/10;
		Local_u8Counter++;
	}
	while(Local_u8Counter !=0)
	{
		CLCD_voidSendData(Local_u16NumberArr[Local_u8Counter-1]);
    2198:	89 81       	ldd	r24, Y+1	; 0x01
    219a:	88 2f       	mov	r24, r24
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	01 97       	sbiw	r24, 0x01	; 1
    21a0:	9c 01       	movw	r18, r24
    21a2:	22 0f       	add	r18, r18
    21a4:	33 1f       	adc	r19, r19
    21a6:	ce 01       	movw	r24, r28
    21a8:	01 96       	adiw	r24, 0x01	; 1
    21aa:	82 0f       	add	r24, r18
    21ac:	93 1f       	adc	r25, r19
    21ae:	fc 01       	movw	r30, r24
    21b0:	31 96       	adiw	r30, 0x01	; 1
    21b2:	80 81       	ld	r24, Z
    21b4:	91 81       	ldd	r25, Z+1	; 0x01
    21b6:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <CLCD_voidSendData>
		Local_u8Counter--;
    21ba:	89 81       	ldd	r24, Y+1	; 0x01
    21bc:	81 50       	subi	r24, 0x01	; 1
    21be:	89 83       	std	Y+1, r24	; 0x01
	{
		Local_u16NumberArr[Local_u8Counter]=Local_u16Number%10+'0';
		Local_u16Number=Local_u16Number/10;
		Local_u8Counter++;
	}
	while(Local_u8Counter !=0)
    21c0:	89 81       	ldd	r24, Y+1	; 0x01
    21c2:	88 23       	and	r24, r24
    21c4:	49 f7       	brne	.-46     	; 0x2198 <ClCD_voidWriteInteger+0x8e>
	{
		CLCD_voidSendData(Local_u16NumberArr[Local_u8Counter-1]);
		Local_u8Counter--;
	}

}
    21c6:	67 96       	adiw	r28, 0x17	; 23
    21c8:	0f b6       	in	r0, 0x3f	; 63
    21ca:	f8 94       	cli
    21cc:	de bf       	out	0x3e, r29	; 62
    21ce:	0f be       	out	0x3f, r0	; 63
    21d0:	cd bf       	out	0x3d, r28	; 61
    21d2:	cf 91       	pop	r28
    21d4:	df 91       	pop	r29
    21d6:	08 95       	ret

000021d8 <main>:

volatile u16 Local_u16Reading1=0;
volatile u16 Local_u16Reading2=0;
volatile u16 Local_u16Reading3=0;
void main (void)
{
    21d8:	df 93       	push	r29
    21da:	cf 93       	push	r28
    21dc:	cd b7       	in	r28, 0x3d	; 61
    21de:	de b7       	in	r29, 0x3e	; 62
    21e0:	2e 97       	sbiw	r28, 0x0e	; 14
    21e2:	0f b6       	in	r0, 0x3f	; 63
    21e4:	f8 94       	cli
    21e6:	de bf       	out	0x3e, r29	; 62
    21e8:	0f be       	out	0x3f, r0	; 63
    21ea:	cd bf       	out	0x3d, r28	; 61
	PORT_voidInit();
    21ec:	0e 94 16 08 	call	0x102c	; 0x102c <PORT_voidInit>
	CLCD_voidInit();
    21f0:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <CLCD_voidInit>
    21f4:	80 e0       	ldi	r24, 0x00	; 0
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	a8 ec       	ldi	r26, 0xC8	; 200
    21fa:	b2 e4       	ldi	r27, 0x42	; 66
    21fc:	8b 87       	std	Y+11, r24	; 0x0b
    21fe:	9c 87       	std	Y+12, r25	; 0x0c
    2200:	ad 87       	std	Y+13, r26	; 0x0d
    2202:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2204:	6b 85       	ldd	r22, Y+11	; 0x0b
    2206:	7c 85       	ldd	r23, Y+12	; 0x0c
    2208:	8d 85       	ldd	r24, Y+13	; 0x0d
    220a:	9e 85       	ldd	r25, Y+14	; 0x0e
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	4a ef       	ldi	r20, 0xFA	; 250
    2212:	54 e4       	ldi	r21, 0x44	; 68
    2214:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2218:	dc 01       	movw	r26, r24
    221a:	cb 01       	movw	r24, r22
    221c:	8f 83       	std	Y+7, r24	; 0x07
    221e:	98 87       	std	Y+8, r25	; 0x08
    2220:	a9 87       	std	Y+9, r26	; 0x09
    2222:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2224:	6f 81       	ldd	r22, Y+7	; 0x07
    2226:	78 85       	ldd	r23, Y+8	; 0x08
    2228:	89 85       	ldd	r24, Y+9	; 0x09
    222a:	9a 85       	ldd	r25, Y+10	; 0x0a
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	40 e8       	ldi	r20, 0x80	; 128
    2232:	5f e3       	ldi	r21, 0x3F	; 63
    2234:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2238:	88 23       	and	r24, r24
    223a:	2c f4       	brge	.+10     	; 0x2246 <main+0x6e>
		__ticks = 1;
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	9e 83       	std	Y+6, r25	; 0x06
    2242:	8d 83       	std	Y+5, r24	; 0x05
    2244:	3f c0       	rjmp	.+126    	; 0x22c4 <main+0xec>
	else if (__tmp > 65535)
    2246:	6f 81       	ldd	r22, Y+7	; 0x07
    2248:	78 85       	ldd	r23, Y+8	; 0x08
    224a:	89 85       	ldd	r24, Y+9	; 0x09
    224c:	9a 85       	ldd	r25, Y+10	; 0x0a
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	3f ef       	ldi	r19, 0xFF	; 255
    2252:	4f e7       	ldi	r20, 0x7F	; 127
    2254:	57 e4       	ldi	r21, 0x47	; 71
    2256:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    225a:	18 16       	cp	r1, r24
    225c:	4c f5       	brge	.+82     	; 0x22b0 <main+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    225e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2260:	7c 85       	ldd	r23, Y+12	; 0x0c
    2262:	8d 85       	ldd	r24, Y+13	; 0x0d
    2264:	9e 85       	ldd	r25, Y+14	; 0x0e
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	40 e2       	ldi	r20, 0x20	; 32
    226c:	51 e4       	ldi	r21, 0x41	; 65
    226e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	bc 01       	movw	r22, r24
    2278:	cd 01       	movw	r24, r26
    227a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	9e 83       	std	Y+6, r25	; 0x06
    2284:	8d 83       	std	Y+5, r24	; 0x05
    2286:	0f c0       	rjmp	.+30     	; 0x22a6 <main+0xce>
    2288:	88 ec       	ldi	r24, 0xC8	; 200
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	9c 83       	std	Y+4, r25	; 0x04
    228e:	8b 83       	std	Y+3, r24	; 0x03
    2290:	8b 81       	ldd	r24, Y+3	; 0x03
    2292:	9c 81       	ldd	r25, Y+4	; 0x04
    2294:	01 97       	sbiw	r24, 0x01	; 1
    2296:	f1 f7       	brne	.-4      	; 0x2294 <main+0xbc>
    2298:	9c 83       	std	Y+4, r25	; 0x04
    229a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    229c:	8d 81       	ldd	r24, Y+5	; 0x05
    229e:	9e 81       	ldd	r25, Y+6	; 0x06
    22a0:	01 97       	sbiw	r24, 0x01	; 1
    22a2:	9e 83       	std	Y+6, r25	; 0x06
    22a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a6:	8d 81       	ldd	r24, Y+5	; 0x05
    22a8:	9e 81       	ldd	r25, Y+6	; 0x06
    22aa:	00 97       	sbiw	r24, 0x00	; 0
    22ac:	69 f7       	brne	.-38     	; 0x2288 <main+0xb0>
    22ae:	14 c0       	rjmp	.+40     	; 0x22d8 <main+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22b0:	6f 81       	ldd	r22, Y+7	; 0x07
    22b2:	78 85       	ldd	r23, Y+8	; 0x08
    22b4:	89 85       	ldd	r24, Y+9	; 0x09
    22b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22bc:	dc 01       	movw	r26, r24
    22be:	cb 01       	movw	r24, r22
    22c0:	9e 83       	std	Y+6, r25	; 0x06
    22c2:	8d 83       	std	Y+5, r24	; 0x05
    22c4:	8d 81       	ldd	r24, Y+5	; 0x05
    22c6:	9e 81       	ldd	r25, Y+6	; 0x06
    22c8:	9a 83       	std	Y+2, r25	; 0x02
    22ca:	89 83       	std	Y+1, r24	; 0x01
    22cc:	89 81       	ldd	r24, Y+1	; 0x01
    22ce:	9a 81       	ldd	r25, Y+2	; 0x02
    22d0:	01 97       	sbiw	r24, 0x01	; 1
    22d2:	f1 f7       	brne	.-4      	; 0x22d0 <main+0xf8>
    22d4:	9a 83       	std	Y+2, r25	; 0x02
    22d6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	TIMER0_voidInt();
    22d8:	0e 94 a3 05 	call	0xb46	; 0xb46 <TIMER0_voidInt>
	ICU_u8SetCallBack(&ICU_HW);
    22dc:	8f e9       	ldi	r24, 0x9F	; 159
    22de:	91 e1       	ldi	r25, 0x11	; 17
    22e0:	0e 94 d5 06 	call	0xdaa	; 0xdaa <ICU_u8SetCallBack>
	ICU_voidInit();
    22e4:	0e 94 87 06 	call	0xd0e	; 0xd0e <ICU_voidInit>
	GIE_voidEnableGlobal();
    22e8:	0e 94 37 08 	call	0x106e	; 0x106e <GIE_voidEnableGlobal>
	while(1)
	{

		while((Period_Ticks==0) || (ON_Ticks==0))
    22ec:	80 91 80 00 	lds	r24, 0x0080
    22f0:	90 91 81 00 	lds	r25, 0x0081
    22f4:	00 97       	sbiw	r24, 0x00	; 0
    22f6:	d1 f3       	breq	.-12     	; 0x22ec <main+0x114>
    22f8:	80 91 82 00 	lds	r24, 0x0082
    22fc:	90 91 83 00 	lds	r25, 0x0083
    2300:	00 97       	sbiw	r24, 0x00	; 0
    2302:	a1 f3       	breq	.-24     	; 0x22ec <main+0x114>
		{

		}
		CLCD_voidGoToXY(0,0);
    2304:	80 e0       	ldi	r24, 0x00	; 0
    2306:	60 e0       	ldi	r22, 0x00	; 0
    2308:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <CLCD_voidGoToXY>
		CLCD_voidWriteString("Period=");
    230c:	80 e6       	ldi	r24, 0x60	; 96
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <CLCD_voidWriteString>
		ClCD_voidWriteInteger(Period_Ticks);
    2314:	80 91 80 00 	lds	r24, 0x0080
    2318:	90 91 81 00 	lds	r25, 0x0081
    231c:	0e 94 85 10 	call	0x210a	; 0x210a <ClCD_voidWriteInteger>


		CLCD_voidGoToXY(0,1);
    2320:	80 e0       	ldi	r24, 0x00	; 0
    2322:	61 e0       	ldi	r22, 0x01	; 1
    2324:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <CLCD_voidGoToXY>
		CLCD_voidWriteString("ON=");
    2328:	88 e6       	ldi	r24, 0x68	; 104
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <CLCD_voidWriteString>
		ClCD_voidWriteInteger(ON_Ticks);
    2330:	80 91 82 00 	lds	r24, 0x0082
    2334:	90 91 83 00 	lds	r25, 0x0083
    2338:	0e 94 85 10 	call	0x210a	; 0x210a <ClCD_voidWriteInteger>
    233c:	d7 cf       	rjmp	.-82     	; 0x22ec <main+0x114>

0000233e <ICU_HW>:
	}
}
void ICU_HW(void)
{
    233e:	df 93       	push	r29
    2340:	cf 93       	push	r28
    2342:	cd b7       	in	r28, 0x3d	; 61
    2344:	de b7       	in	r29, 0x3e	; 62
	static volatile u8 Local_u8Counter=0;

	Local_u8Counter++;
    2346:	80 91 8a 00 	lds	r24, 0x008A
    234a:	8f 5f       	subi	r24, 0xFF	; 255
    234c:	80 93 8a 00 	sts	0x008A, r24
	if(Local_u8Counter==1)
    2350:	80 91 8a 00 	lds	r24, 0x008A
    2354:	81 30       	cpi	r24, 0x01	; 1
    2356:	39 f4       	brne	.+14     	; 0x2366 <ICU_HW+0x28>
	{
		Local_u16Reading1=ICU_u16ReadInputCapture();
    2358:	0e 94 23 07 	call	0xe46	; 0xe46 <ICU_u16ReadInputCapture>
    235c:	90 93 85 00 	sts	0x0085, r25
    2360:	80 93 84 00 	sts	0x0084, r24
    2364:	3a c0       	rjmp	.+116    	; 0x23da <ICU_HW+0x9c>
	}
	else if(Local_u8Counter==2)
    2366:	80 91 8a 00 	lds	r24, 0x008A
    236a:	82 30       	cpi	r24, 0x02	; 2
    236c:	d1 f4       	brne	.+52     	; 0x23a2 <ICU_HW+0x64>
	{
		Local_u16Reading2=ICU_u16ReadInputCapture();
    236e:	0e 94 23 07 	call	0xe46	; 0xe46 <ICU_u16ReadInputCapture>
    2372:	90 93 87 00 	sts	0x0087, r25
    2376:	80 93 86 00 	sts	0x0086, r24

		Period_Ticks=Local_u16Reading2-Local_u16Reading1;
    237a:	20 91 86 00 	lds	r18, 0x0086
    237e:	30 91 87 00 	lds	r19, 0x0087
    2382:	80 91 84 00 	lds	r24, 0x0084
    2386:	90 91 85 00 	lds	r25, 0x0085
    238a:	a9 01       	movw	r20, r18
    238c:	48 1b       	sub	r20, r24
    238e:	59 0b       	sbc	r21, r25
    2390:	ca 01       	movw	r24, r20
    2392:	90 93 81 00 	sts	0x0081, r25
    2396:	80 93 80 00 	sts	0x0080, r24

		ICU_u8SetTrigger(FALLING_EDGE);
    239a:	80 e0       	ldi	r24, 0x00	; 0
    239c:	0e 94 f2 06 	call	0xde4	; 0xde4 <ICU_u8SetTrigger>
    23a0:	1c c0       	rjmp	.+56     	; 0x23da <ICU_HW+0x9c>
	}
	else if (Local_u8Counter==3)
    23a2:	80 91 8a 00 	lds	r24, 0x008A
    23a6:	83 30       	cpi	r24, 0x03	; 3
    23a8:	c1 f4       	brne	.+48     	; 0x23da <ICU_HW+0x9c>
	{
		Local_u16Reading3=ICU_u16ReadInputCapture();
    23aa:	0e 94 23 07 	call	0xe46	; 0xe46 <ICU_u16ReadInputCapture>
    23ae:	90 93 89 00 	sts	0x0089, r25
    23b2:	80 93 88 00 	sts	0x0088, r24

		ON_Ticks=Local_u16Reading3-Local_u16Reading2;
    23b6:	20 91 88 00 	lds	r18, 0x0088
    23ba:	30 91 89 00 	lds	r19, 0x0089
    23be:	80 91 86 00 	lds	r24, 0x0086
    23c2:	90 91 87 00 	lds	r25, 0x0087
    23c6:	a9 01       	movw	r20, r18
    23c8:	48 1b       	sub	r20, r24
    23ca:	59 0b       	sbc	r21, r25
    23cc:	ca 01       	movw	r24, r20
    23ce:	90 93 83 00 	sts	0x0083, r25
    23d2:	80 93 82 00 	sts	0x0082, r24

		ICU_voidInterruptDisable();
    23d6:	0e 94 2e 07 	call	0xe5c	; 0xe5c <ICU_voidInterruptDisable>
	}
}
    23da:	cf 91       	pop	r28
    23dc:	df 91       	pop	r29
    23de:	08 95       	ret

000023e0 <__udivmodhi4>:
    23e0:	aa 1b       	sub	r26, r26
    23e2:	bb 1b       	sub	r27, r27
    23e4:	51 e1       	ldi	r21, 0x11	; 17
    23e6:	07 c0       	rjmp	.+14     	; 0x23f6 <__udivmodhi4_ep>

000023e8 <__udivmodhi4_loop>:
    23e8:	aa 1f       	adc	r26, r26
    23ea:	bb 1f       	adc	r27, r27
    23ec:	a6 17       	cp	r26, r22
    23ee:	b7 07       	cpc	r27, r23
    23f0:	10 f0       	brcs	.+4      	; 0x23f6 <__udivmodhi4_ep>
    23f2:	a6 1b       	sub	r26, r22
    23f4:	b7 0b       	sbc	r27, r23

000023f6 <__udivmodhi4_ep>:
    23f6:	88 1f       	adc	r24, r24
    23f8:	99 1f       	adc	r25, r25
    23fa:	5a 95       	dec	r21
    23fc:	a9 f7       	brne	.-22     	; 0x23e8 <__udivmodhi4_loop>
    23fe:	80 95       	com	r24
    2400:	90 95       	com	r25
    2402:	bc 01       	movw	r22, r24
    2404:	cd 01       	movw	r24, r26
    2406:	08 95       	ret

00002408 <__prologue_saves__>:
    2408:	2f 92       	push	r2
    240a:	3f 92       	push	r3
    240c:	4f 92       	push	r4
    240e:	5f 92       	push	r5
    2410:	6f 92       	push	r6
    2412:	7f 92       	push	r7
    2414:	8f 92       	push	r8
    2416:	9f 92       	push	r9
    2418:	af 92       	push	r10
    241a:	bf 92       	push	r11
    241c:	cf 92       	push	r12
    241e:	df 92       	push	r13
    2420:	ef 92       	push	r14
    2422:	ff 92       	push	r15
    2424:	0f 93       	push	r16
    2426:	1f 93       	push	r17
    2428:	cf 93       	push	r28
    242a:	df 93       	push	r29
    242c:	cd b7       	in	r28, 0x3d	; 61
    242e:	de b7       	in	r29, 0x3e	; 62
    2430:	ca 1b       	sub	r28, r26
    2432:	db 0b       	sbc	r29, r27
    2434:	0f b6       	in	r0, 0x3f	; 63
    2436:	f8 94       	cli
    2438:	de bf       	out	0x3e, r29	; 62
    243a:	0f be       	out	0x3f, r0	; 63
    243c:	cd bf       	out	0x3d, r28	; 61
    243e:	09 94       	ijmp

00002440 <__epilogue_restores__>:
    2440:	2a 88       	ldd	r2, Y+18	; 0x12
    2442:	39 88       	ldd	r3, Y+17	; 0x11
    2444:	48 88       	ldd	r4, Y+16	; 0x10
    2446:	5f 84       	ldd	r5, Y+15	; 0x0f
    2448:	6e 84       	ldd	r6, Y+14	; 0x0e
    244a:	7d 84       	ldd	r7, Y+13	; 0x0d
    244c:	8c 84       	ldd	r8, Y+12	; 0x0c
    244e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2450:	aa 84       	ldd	r10, Y+10	; 0x0a
    2452:	b9 84       	ldd	r11, Y+9	; 0x09
    2454:	c8 84       	ldd	r12, Y+8	; 0x08
    2456:	df 80       	ldd	r13, Y+7	; 0x07
    2458:	ee 80       	ldd	r14, Y+6	; 0x06
    245a:	fd 80       	ldd	r15, Y+5	; 0x05
    245c:	0c 81       	ldd	r16, Y+4	; 0x04
    245e:	1b 81       	ldd	r17, Y+3	; 0x03
    2460:	aa 81       	ldd	r26, Y+2	; 0x02
    2462:	b9 81       	ldd	r27, Y+1	; 0x01
    2464:	ce 0f       	add	r28, r30
    2466:	d1 1d       	adc	r29, r1
    2468:	0f b6       	in	r0, 0x3f	; 63
    246a:	f8 94       	cli
    246c:	de bf       	out	0x3e, r29	; 62
    246e:	0f be       	out	0x3f, r0	; 63
    2470:	cd bf       	out	0x3d, r28	; 61
    2472:	ed 01       	movw	r28, r26
    2474:	08 95       	ret

00002476 <_exit>:
    2476:	f8 94       	cli

00002478 <__stop_program>:
    2478:	ff cf       	rjmp	.-2      	; 0x2478 <__stop_program>
